Nonterminals useless in grammar

    scope
    prog


Rules useless in grammar

   34 scope: prog

   35 prog: line


State 63 conflicts: 1 shift/reduce


Grammar

    0 $accept: line $end

    1 line: line ';' '\n' line
    2     | END '\n'
    3     | expr '\n'
    4     | exprFraction '\n'
    5     | exprStrings '\n'
    6     | STRING
    7     | ID
    8     | IF
    9     | THEN
   10     | ELSE
   11     | FOR
   12     | TIMES
   13     | FROM
   14     | INCREASING
   15     | DECREASING
   16     | FRACTION

   17 expr: expr '+' expr
   18     | expr '-' expr
   19     | expr '*' expr
   20     | expr ':' expr
   21     | RAD '(' expr ')'
   22     | LOG '(' expr ')'
   23     | MOD '(' expr ',' expr ')'
   24     | POW '(' expr ',' expr ')'
   25     | REAL

   26 exprFraction: exprFraction '+' exprFraction
   27             | exprFraction '-' exprFraction
   28             | exprFraction '*' exprFraction
   29             | exprFraction ':' exprFraction
   30             | FRACTION

   31 exprStrings: exprStrings '+' exprStrings
   32            | exprStrings '*' REAL
   33            | STRING


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 1 2 3 4 5
    '(' (40) 21 22 23 24
    ')' (41) 21 22 23 24
    '*' (42) 19 28 32
    '+' (43) 17 26 31
    ',' (44) 23 24
    '-' (45) 18 27
    ':' (58) 20 29
    ';' (59) 1
    error (256)
    ID <lexeme> (258) 7
    REAL <value> (259) 25 32
    STRING <lexeme> (260) 6 33
    FRACTION <lexeme> (261) 16 30
    LOG (262) 22
    RAD (263) 21
    MOD (264) 23
    POW (265) 24
    IF (266) 8
    THEN (267) 9
    ELSE (268) 10
    FOR (269) 11
    TIMES (270) 12
    FROM (271) 13
    INCREASING (272) 14
    DECREASING (273) 15
    END (274) 2


Nonterminals, with rules where they appear

    $accept (29)
        on left: 0
    line (30)
        on left: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
        on right: 0 1
    expr <value> (31)
        on left: 17 18 19 20 21 22 23 24 25
        on right: 3 17 18 19 20 21 22 23 24
    exprFraction <lexeme> (32)
        on left: 26 27 28 29 30
        on right: 4 26 27 28 29
    exprStrings <lexeme> (33)
        on left: 31 32 33
        on right: 5 31 32


State 0

    0 $accept: • line $end

    ID          shift, and go to state 1
    REAL        shift, and go to state 2
    STRING      shift, and go to state 3
    FRACTION    shift, and go to state 4
    LOG         shift, and go to state 5
    RAD         shift, and go to state 6
    MOD         shift, and go to state 7
    POW         shift, and go to state 8
    IF          shift, and go to state 9
    THEN        shift, and go to state 10
    ELSE        shift, and go to state 11
    FOR         shift, and go to state 12
    TIMES       shift, and go to state 13
    FROM        shift, and go to state 14
    INCREASING  shift, and go to state 15
    DECREASING  shift, and go to state 16
    END         shift, and go to state 17

    line          go to state 18
    expr          go to state 19
    exprFraction  go to state 20
    exprStrings   go to state 21


State 1

    7 line: ID •

    $default  reduce using rule 7 (line)


State 2

   25 expr: REAL •

    $default  reduce using rule 25 (expr)


State 3

    6 line: STRING •
   33 exprStrings: STRING •

    $end      reduce using rule 6 (line)
    ';'       reduce using rule 6 (line)
    $default  reduce using rule 33 (exprStrings)


State 4

   16 line: FRACTION •
   30 exprFraction: FRACTION •

    $end      reduce using rule 16 (line)
    ';'       reduce using rule 16 (line)
    $default  reduce using rule 30 (exprFraction)


State 5

   22 expr: LOG • '(' expr ')'

    '('  shift, and go to state 22


State 6

   21 expr: RAD • '(' expr ')'

    '('  shift, and go to state 23


State 7

   23 expr: MOD • '(' expr ',' expr ')'

    '('  shift, and go to state 24


State 8

   24 expr: POW • '(' expr ',' expr ')'

    '('  shift, and go to state 25


State 9

    8 line: IF •

    $default  reduce using rule 8 (line)


State 10

    9 line: THEN •

    $default  reduce using rule 9 (line)


State 11

   10 line: ELSE •

    $default  reduce using rule 10 (line)


State 12

   11 line: FOR •

    $default  reduce using rule 11 (line)


State 13

   12 line: TIMES •

    $default  reduce using rule 12 (line)


State 14

   13 line: FROM •

    $default  reduce using rule 13 (line)


State 15

   14 line: INCREASING •

    $default  reduce using rule 14 (line)


State 16

   15 line: DECREASING •

    $default  reduce using rule 15 (line)


State 17

    2 line: END • '\n'

    '\n'  shift, and go to state 26


State 18

    0 $accept: line • $end
    1 line: line • ';' '\n' line

    $end  shift, and go to state 27
    ';'   shift, and go to state 28


State 19

    3 line: expr • '\n'
   17 expr: expr • '+' expr
   18     | expr • '-' expr
   19     | expr • '*' expr
   20     | expr • ':' expr

    '+'   shift, and go to state 29
    '-'   shift, and go to state 30
    '*'   shift, and go to state 31
    ':'   shift, and go to state 32
    '\n'  shift, and go to state 33


State 20

    4 line: exprFraction • '\n'
   26 exprFraction: exprFraction • '+' exprFraction
   27             | exprFraction • '-' exprFraction
   28             | exprFraction • '*' exprFraction
   29             | exprFraction • ':' exprFraction

    '+'   shift, and go to state 34
    '-'   shift, and go to state 35
    '*'   shift, and go to state 36
    ':'   shift, and go to state 37
    '\n'  shift, and go to state 38


State 21

    5 line: exprStrings • '\n'
   31 exprStrings: exprStrings • '+' exprStrings
   32            | exprStrings • '*' REAL

    '+'   shift, and go to state 39
    '*'   shift, and go to state 40
    '\n'  shift, and go to state 41


State 22

   22 expr: LOG '(' • expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 5
    RAD   shift, and go to state 6
    MOD   shift, and go to state 7
    POW   shift, and go to state 8

    expr  go to state 42


State 23

   21 expr: RAD '(' • expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 5
    RAD   shift, and go to state 6
    MOD   shift, and go to state 7
    POW   shift, and go to state 8

    expr  go to state 43


State 24

   23 expr: MOD '(' • expr ',' expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 5
    RAD   shift, and go to state 6
    MOD   shift, and go to state 7
    POW   shift, and go to state 8

    expr  go to state 44


State 25

   24 expr: POW '(' • expr ',' expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 5
    RAD   shift, and go to state 6
    MOD   shift, and go to state 7
    POW   shift, and go to state 8

    expr  go to state 45


State 26

    2 line: END '\n' •

    $default  reduce using rule 2 (line)


State 27

    0 $accept: line $end •

    $default  accept


State 28

    1 line: line ';' • '\n' line

    '\n'  shift, and go to state 46


State 29

   17 expr: expr '+' • expr

    REAL  shift, and go to state 2
    LOG   shift, and go to state 5
    RAD   shift, and go to state 6
    MOD   shift, and go to state 7
    POW   shift, and go to state 8

    expr  go to state 47


State 30

   18 expr: expr '-' • expr

    REAL  shift, and go to state 2
    LOG   shift, and go to state 5
    RAD   shift, and go to state 6
    MOD   shift, and go to state 7
    POW   shift, and go to state 8

    expr  go to state 48


State 31

   19 expr: expr '*' • expr

    REAL  shift, and go to state 2
    LOG   shift, and go to state 5
    RAD   shift, and go to state 6
    MOD   shift, and go to state 7
    POW   shift, and go to state 8

    expr  go to state 49


State 32

   20 expr: expr ':' • expr

    REAL  shift, and go to state 2
    LOG   shift, and go to state 5
    RAD   shift, and go to state 6
    MOD   shift, and go to state 7
    POW   shift, and go to state 8

    expr  go to state 50


State 33

    3 line: expr '\n' •

    $default  reduce using rule 3 (line)


State 34

   26 exprFraction: exprFraction '+' • exprFraction

    FRACTION  shift, and go to state 51

    exprFraction  go to state 52


State 35

   27 exprFraction: exprFraction '-' • exprFraction

    FRACTION  shift, and go to state 51

    exprFraction  go to state 53


State 36

   28 exprFraction: exprFraction '*' • exprFraction

    FRACTION  shift, and go to state 51

    exprFraction  go to state 54


State 37

   29 exprFraction: exprFraction ':' • exprFraction

    FRACTION  shift, and go to state 51

    exprFraction  go to state 55


State 38

    4 line: exprFraction '\n' •

    $default  reduce using rule 4 (line)


State 39

   31 exprStrings: exprStrings '+' • exprStrings

    STRING  shift, and go to state 56

    exprStrings  go to state 57


State 40

   32 exprStrings: exprStrings '*' • REAL

    REAL  shift, and go to state 58


State 41

    5 line: exprStrings '\n' •

    $default  reduce using rule 5 (line)


State 42

   17 expr: expr • '+' expr
   18     | expr • '-' expr
   19     | expr • '*' expr
   20     | expr • ':' expr
   22     | LOG '(' expr • ')'

    '+'  shift, and go to state 29
    '-'  shift, and go to state 30
    '*'  shift, and go to state 31
    ':'  shift, and go to state 32
    ')'  shift, and go to state 59


State 43

   17 expr: expr • '+' expr
   18     | expr • '-' expr
   19     | expr • '*' expr
   20     | expr • ':' expr
   21     | RAD '(' expr • ')'

    '+'  shift, and go to state 29
    '-'  shift, and go to state 30
    '*'  shift, and go to state 31
    ':'  shift, and go to state 32
    ')'  shift, and go to state 60


State 44

   17 expr: expr • '+' expr
   18     | expr • '-' expr
   19     | expr • '*' expr
   20     | expr • ':' expr
   23     | MOD '(' expr • ',' expr ')'

    '+'  shift, and go to state 29
    '-'  shift, and go to state 30
    '*'  shift, and go to state 31
    ':'  shift, and go to state 32
    ','  shift, and go to state 61


State 45

   17 expr: expr • '+' expr
   18     | expr • '-' expr
   19     | expr • '*' expr
   20     | expr • ':' expr
   24     | POW '(' expr • ',' expr ')'

    '+'  shift, and go to state 29
    '-'  shift, and go to state 30
    '*'  shift, and go to state 31
    ':'  shift, and go to state 32
    ','  shift, and go to state 62


State 46

    1 line: line ';' '\n' • line

    ID          shift, and go to state 1
    REAL        shift, and go to state 2
    STRING      shift, and go to state 3
    FRACTION    shift, and go to state 4
    LOG         shift, and go to state 5
    RAD         shift, and go to state 6
    MOD         shift, and go to state 7
    POW         shift, and go to state 8
    IF          shift, and go to state 9
    THEN        shift, and go to state 10
    ELSE        shift, and go to state 11
    FOR         shift, and go to state 12
    TIMES       shift, and go to state 13
    FROM        shift, and go to state 14
    INCREASING  shift, and go to state 15
    DECREASING  shift, and go to state 16
    END         shift, and go to state 17

    line          go to state 63
    expr          go to state 19
    exprFraction  go to state 20
    exprStrings   go to state 21


State 47

   17 expr: expr • '+' expr
   17     | expr '+' expr •
   18     | expr • '-' expr
   19     | expr • '*' expr
   20     | expr • ':' expr

    '*'  shift, and go to state 31
    ':'  shift, and go to state 32

    $default  reduce using rule 17 (expr)


State 48

   17 expr: expr • '+' expr
   18     | expr • '-' expr
   18     | expr '-' expr •
   19     | expr • '*' expr
   20     | expr • ':' expr

    '*'  shift, and go to state 31
    ':'  shift, and go to state 32

    $default  reduce using rule 18 (expr)


State 49

   17 expr: expr • '+' expr
   18     | expr • '-' expr
   19     | expr • '*' expr
   19     | expr '*' expr •
   20     | expr • ':' expr

    $default  reduce using rule 19 (expr)


State 50

   17 expr: expr • '+' expr
   18     | expr • '-' expr
   19     | expr • '*' expr
   20     | expr • ':' expr
   20     | expr ':' expr •

    $default  reduce using rule 20 (expr)


State 51

   30 exprFraction: FRACTION •

    $default  reduce using rule 30 (exprFraction)


State 52

   26 exprFraction: exprFraction • '+' exprFraction
   26             | exprFraction '+' exprFraction •
   27             | exprFraction • '-' exprFraction
   28             | exprFraction • '*' exprFraction
   29             | exprFraction • ':' exprFraction

    '*'  shift, and go to state 36
    ':'  shift, and go to state 37

    $default  reduce using rule 26 (exprFraction)


State 53

   26 exprFraction: exprFraction • '+' exprFraction
   27             | exprFraction • '-' exprFraction
   27             | exprFraction '-' exprFraction •
   28             | exprFraction • '*' exprFraction
   29             | exprFraction • ':' exprFraction

    '*'  shift, and go to state 36
    ':'  shift, and go to state 37

    $default  reduce using rule 27 (exprFraction)


State 54

   26 exprFraction: exprFraction • '+' exprFraction
   27             | exprFraction • '-' exprFraction
   28             | exprFraction • '*' exprFraction
   28             | exprFraction '*' exprFraction •
   29             | exprFraction • ':' exprFraction

    $default  reduce using rule 28 (exprFraction)


State 55

   26 exprFraction: exprFraction • '+' exprFraction
   27             | exprFraction • '-' exprFraction
   28             | exprFraction • '*' exprFraction
   29             | exprFraction • ':' exprFraction
   29             | exprFraction ':' exprFraction •

    $default  reduce using rule 29 (exprFraction)


State 56

   33 exprStrings: STRING •

    $default  reduce using rule 33 (exprStrings)


State 57

   31 exprStrings: exprStrings • '+' exprStrings
   31            | exprStrings '+' exprStrings •
   32            | exprStrings • '*' REAL

    '*'  shift, and go to state 40

    $default  reduce using rule 31 (exprStrings)


State 58

   32 exprStrings: exprStrings '*' REAL •

    $default  reduce using rule 32 (exprStrings)


State 59

   22 expr: LOG '(' expr ')' •

    $default  reduce using rule 22 (expr)


State 60

   21 expr: RAD '(' expr ')' •

    $default  reduce using rule 21 (expr)


State 61

   23 expr: MOD '(' expr ',' • expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 5
    RAD   shift, and go to state 6
    MOD   shift, and go to state 7
    POW   shift, and go to state 8

    expr  go to state 64


State 62

   24 expr: POW '(' expr ',' • expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 5
    RAD   shift, and go to state 6
    MOD   shift, and go to state 7
    POW   shift, and go to state 8

    expr  go to state 65


State 63

    1 line: line • ';' '\n' line
    1     | line ';' '\n' line •

    ';'  shift, and go to state 28

    ';'       [reduce using rule 1 (line)]
    $default  reduce using rule 1 (line)


State 64

   17 expr: expr • '+' expr
   18     | expr • '-' expr
   19     | expr • '*' expr
   20     | expr • ':' expr
   23     | MOD '(' expr ',' expr • ')'

    '+'  shift, and go to state 29
    '-'  shift, and go to state 30
    '*'  shift, and go to state 31
    ':'  shift, and go to state 32
    ')'  shift, and go to state 66


State 65

   17 expr: expr • '+' expr
   18     | expr • '-' expr
   19     | expr • '*' expr
   20     | expr • ':' expr
   24     | POW '(' expr ',' expr • ')'

    '+'  shift, and go to state 29
    '-'  shift, and go to state 30
    '*'  shift, and go to state 31
    ':'  shift, and go to state 32
    ')'  shift, and go to state 67


State 66

   23 expr: MOD '(' expr ',' expr ')' •

    $default  reduce using rule 23 (expr)


State 67

   24 expr: POW '(' expr ',' expr ')' •

    $default  reduce using rule 24 (expr)
