Grammar

    0 $accept: scope $end

    1 scope: prog

    2 prog: line ';' '\n' prog
    3     | line ';' '\n'

    4 line: END '\n'
    5     | exprGeneral
    6     | TYPE ID '=' exprGeneral
    7     | ID '=' exprGeneral
    8     | BOOLEAN
    9     | exprBool
   10     | IF '(' exprBool ')' '{' '\n' prog '}'
   11     | WHILE '(' exprBool ')' '{' '\n' prog '}'
   12     | THEN
   13     | IF '(' exprBool ')' '{' '\n' prog '}' ELSE '{' '\n' prog '}'
   14     | FOR
   15     | TIMES
   16     | FROM
   17     | INCREASING
   18     | DECREASING

   19 exprGeneral: exprGeneral '+' exprGeneral
   20            | exprGeneral '-' exprGeneral
   21            | exprGeneral '*' exprGeneral
   22            | exprGeneral ':' exprGeneral
   23            | RAD '(' exprGeneral ')'
   24            | LOG '(' exprGeneral ')'
   25            | MOD '(' exprGeneral ',' exprGeneral ')'
   26            | POW '(' exprGeneral ',' exprGeneral ')'
   27            | ID
   28            | REAL
   29            | FRACTION
   30            | STRING

   31 exprBool: exprGeneral '>' exprGeneral
   32         | exprGeneral '<' exprGeneral
   33         | exprGeneral EQ exprGeneral


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 2 3 4 10 11 13
    '(' (40) 10 11 13 23 24 25 26
    ')' (41) 10 11 13 23 24 25 26
    '*' (42) 21
    '+' (43) 19
    ',' (44) 25 26
    '-' (45) 20
    ':' (58) 22
    ';' (59) 2 3
    '<' (60) 32
    '=' (61) 6 7
    '>' (62) 31
    '{' (123) 10 11 13
    '}' (125) 10 11 13
    error (256)
    END (258) 4
    ID <lexeme> (259) 6 7 27
    REAL <value> (260) 28
    STRING <lexeme> (261) 30
    FRACTION <lexeme> (262) 29
    TYPE <lexeme> (263) 6
    LOG (264) 24
    RAD (265) 23
    MOD (266) 25
    POW (267) 26
    IF (268) 10 13
    THEN (269) 12
    ELSE (270) 13
    FOR (271) 14
    TIMES (272) 15
    FROM (273) 16
    INCREASING (274) 17
    DECREASING (275) 18
    BOOLEAN (276) 8
    EQ (277) 33
    WHILE (278) 11


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    scope (39)
        on left: 1
        on right: 0
    prog (40)
        on left: 2 3
        on right: 1 2 10 11 13
    line (41)
        on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
        on right: 2 3
    exprGeneral <id> (42)
        on left: 19 20 21 22 23 24 25 26 27 28 29 30
        on right: 5 6 7 19 20 21 22 23 24 25 26 31 32 33
    exprBool <boolean> (43)
        on left: 31 32 33
        on right: 9 10 11 13


State 0

    0 $accept: • scope $end

    END         shift, and go to state 1
    ID          shift, and go to state 2
    REAL        shift, and go to state 3
    STRING      shift, and go to state 4
    FRACTION    shift, and go to state 5
    TYPE        shift, and go to state 6
    LOG         shift, and go to state 7
    RAD         shift, and go to state 8
    MOD         shift, and go to state 9
    POW         shift, and go to state 10
    IF          shift, and go to state 11
    THEN        shift, and go to state 12
    FOR         shift, and go to state 13
    TIMES       shift, and go to state 14
    FROM        shift, and go to state 15
    INCREASING  shift, and go to state 16
    DECREASING  shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    WHILE       shift, and go to state 19

    scope        go to state 20
    prog         go to state 21
    line         go to state 22
    exprGeneral  go to state 23
    exprBool     go to state 24


State 1

    4 line: END • '\n'

    '\n'  shift, and go to state 25


State 2

    7 line: ID • '=' exprGeneral
   27 exprGeneral: ID •

    '='  shift, and go to state 26

    $default  reduce using rule 27 (exprGeneral)


State 3

   28 exprGeneral: REAL •

    $default  reduce using rule 28 (exprGeneral)


State 4

   30 exprGeneral: STRING •

    $default  reduce using rule 30 (exprGeneral)


State 5

   29 exprGeneral: FRACTION •

    $default  reduce using rule 29 (exprGeneral)


State 6

    6 line: TYPE • ID '=' exprGeneral

    ID  shift, and go to state 27


State 7

   24 exprGeneral: LOG • '(' exprGeneral ')'

    '('  shift, and go to state 28


State 8

   23 exprGeneral: RAD • '(' exprGeneral ')'

    '('  shift, and go to state 29


State 9

   25 exprGeneral: MOD • '(' exprGeneral ',' exprGeneral ')'

    '('  shift, and go to state 30


State 10

   26 exprGeneral: POW • '(' exprGeneral ',' exprGeneral ')'

    '('  shift, and go to state 31


State 11

   10 line: IF • '(' exprBool ')' '{' '\n' prog '}'
   13     | IF • '(' exprBool ')' '{' '\n' prog '}' ELSE '{' '\n' prog '}'

    '('  shift, and go to state 32


State 12

   12 line: THEN •

    $default  reduce using rule 12 (line)


State 13

   14 line: FOR •

    $default  reduce using rule 14 (line)


State 14

   15 line: TIMES •

    $default  reduce using rule 15 (line)


State 15

   16 line: FROM •

    $default  reduce using rule 16 (line)


State 16

   17 line: INCREASING •

    $default  reduce using rule 17 (line)


State 17

   18 line: DECREASING •

    $default  reduce using rule 18 (line)


State 18

    8 line: BOOLEAN •

    $default  reduce using rule 8 (line)


State 19

   11 line: WHILE • '(' exprBool ')' '{' '\n' prog '}'

    '('  shift, and go to state 33


State 20

    0 $accept: scope • $end

    $end  shift, and go to state 34


State 21

    1 scope: prog •

    $default  reduce using rule 1 (scope)


State 22

    2 prog: line • ';' '\n' prog
    3     | line • ';' '\n'

    ';'  shift, and go to state 35


State 23

    5 line: exprGeneral •
   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral
   31 exprBool: exprGeneral • '>' exprGeneral
   32         | exprGeneral • '<' exprGeneral
   33         | exprGeneral • EQ exprGeneral

    EQ   shift, and go to state 36
    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    ':'  shift, and go to state 40
    '<'  shift, and go to state 41
    '>'  shift, and go to state 42

    $default  reduce using rule 5 (line)


State 24

    9 line: exprBool •

    $default  reduce using rule 9 (line)


State 25

    4 line: END '\n' •

    $default  reduce using rule 4 (line)


State 26

    7 line: ID '=' • exprGeneral

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 44


State 27

    6 line: TYPE ID • '=' exprGeneral

    '='  shift, and go to state 45


State 28

   24 exprGeneral: LOG '(' • exprGeneral ')'

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 46


State 29

   23 exprGeneral: RAD '(' • exprGeneral ')'

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 47


State 30

   25 exprGeneral: MOD '(' • exprGeneral ',' exprGeneral ')'

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 48


State 31

   26 exprGeneral: POW '(' • exprGeneral ',' exprGeneral ')'

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 49


State 32

   10 line: IF '(' • exprBool ')' '{' '\n' prog '}'
   13     | IF '(' • exprBool ')' '{' '\n' prog '}' ELSE '{' '\n' prog '}'

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 50
    exprBool     go to state 51


State 33

   11 line: WHILE '(' • exprBool ')' '{' '\n' prog '}'

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 50
    exprBool     go to state 52


State 34

    0 $accept: scope $end •

    $default  accept


State 35

    2 prog: line ';' • '\n' prog
    3     | line ';' • '\n'

    '\n'  shift, and go to state 53


State 36

   33 exprBool: exprGeneral EQ • exprGeneral

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 54


State 37

   19 exprGeneral: exprGeneral '+' • exprGeneral

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 55


State 38

   20 exprGeneral: exprGeneral '-' • exprGeneral

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 56


State 39

   21 exprGeneral: exprGeneral '*' • exprGeneral

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 57


State 40

   22 exprGeneral: exprGeneral ':' • exprGeneral

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 58


State 41

   32 exprBool: exprGeneral '<' • exprGeneral

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 59


State 42

   31 exprBool: exprGeneral '>' • exprGeneral

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 60


State 43

   27 exprGeneral: ID •

    $default  reduce using rule 27 (exprGeneral)


State 44

    7 line: ID '=' exprGeneral •
   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    ':'  shift, and go to state 40

    $default  reduce using rule 7 (line)


State 45

    6 line: TYPE ID '=' • exprGeneral

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 61


State 46

   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral
   24            | LOG '(' exprGeneral • ')'

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    ':'  shift, and go to state 40
    ')'  shift, and go to state 62


State 47

   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral
   23            | RAD '(' exprGeneral • ')'

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    ':'  shift, and go to state 40
    ')'  shift, and go to state 63


State 48

   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral
   25            | MOD '(' exprGeneral • ',' exprGeneral ')'

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    ':'  shift, and go to state 40
    ','  shift, and go to state 64


State 49

   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral
   26            | POW '(' exprGeneral • ',' exprGeneral ')'

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    ':'  shift, and go to state 40
    ','  shift, and go to state 65


State 50

   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral
   31 exprBool: exprGeneral • '>' exprGeneral
   32         | exprGeneral • '<' exprGeneral
   33         | exprGeneral • EQ exprGeneral

    EQ   shift, and go to state 36
    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    ':'  shift, and go to state 40
    '<'  shift, and go to state 41
    '>'  shift, and go to state 42


State 51

   10 line: IF '(' exprBool • ')' '{' '\n' prog '}'
   13     | IF '(' exprBool • ')' '{' '\n' prog '}' ELSE '{' '\n' prog '}'

    ')'  shift, and go to state 66


State 52

   11 line: WHILE '(' exprBool • ')' '{' '\n' prog '}'

    ')'  shift, and go to state 67


State 53

    2 prog: line ';' '\n' • prog
    3     | line ';' '\n' •

    END         shift, and go to state 1
    ID          shift, and go to state 2
    REAL        shift, and go to state 3
    STRING      shift, and go to state 4
    FRACTION    shift, and go to state 5
    TYPE        shift, and go to state 6
    LOG         shift, and go to state 7
    RAD         shift, and go to state 8
    MOD         shift, and go to state 9
    POW         shift, and go to state 10
    IF          shift, and go to state 11
    THEN        shift, and go to state 12
    FOR         shift, and go to state 13
    TIMES       shift, and go to state 14
    FROM        shift, and go to state 15
    INCREASING  shift, and go to state 16
    DECREASING  shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    WHILE       shift, and go to state 19

    $default  reduce using rule 3 (prog)

    prog         go to state 68
    line         go to state 22
    exprGeneral  go to state 23
    exprBool     go to state 24


State 54

   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral
   33 exprBool: exprGeneral EQ exprGeneral •

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    ':'  shift, and go to state 40

    $default  reduce using rule 33 (exprBool)


State 55

   19 exprGeneral: exprGeneral • '+' exprGeneral
   19            | exprGeneral '+' exprGeneral •
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral

    '*'  shift, and go to state 39
    ':'  shift, and go to state 40

    $default  reduce using rule 19 (exprGeneral)


State 56

   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   20            | exprGeneral '-' exprGeneral •
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral

    '*'  shift, and go to state 39
    ':'  shift, and go to state 40

    $default  reduce using rule 20 (exprGeneral)


State 57

   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   21            | exprGeneral '*' exprGeneral •
   22            | exprGeneral • ':' exprGeneral

    $default  reduce using rule 21 (exprGeneral)


State 58

   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral
   22            | exprGeneral ':' exprGeneral •

    $default  reduce using rule 22 (exprGeneral)


State 59

   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral
   32 exprBool: exprGeneral '<' exprGeneral •

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    ':'  shift, and go to state 40

    $default  reduce using rule 32 (exprBool)


State 60

   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral
   31 exprBool: exprGeneral '>' exprGeneral •

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    ':'  shift, and go to state 40

    $default  reduce using rule 31 (exprBool)


State 61

    6 line: TYPE ID '=' exprGeneral •
   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    ':'  shift, and go to state 40

    $default  reduce using rule 6 (line)


State 62

   24 exprGeneral: LOG '(' exprGeneral ')' •

    $default  reduce using rule 24 (exprGeneral)


State 63

   23 exprGeneral: RAD '(' exprGeneral ')' •

    $default  reduce using rule 23 (exprGeneral)


State 64

   25 exprGeneral: MOD '(' exprGeneral ',' • exprGeneral ')'

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 69


State 65

   26 exprGeneral: POW '(' exprGeneral ',' • exprGeneral ')'

    ID        shift, and go to state 43
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 70


State 66

   10 line: IF '(' exprBool ')' • '{' '\n' prog '}'
   13     | IF '(' exprBool ')' • '{' '\n' prog '}' ELSE '{' '\n' prog '}'

    '{'  shift, and go to state 71


State 67

   11 line: WHILE '(' exprBool ')' • '{' '\n' prog '}'

    '{'  shift, and go to state 72


State 68

    2 prog: line ';' '\n' prog •

    $default  reduce using rule 2 (prog)


State 69

   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral
   25            | MOD '(' exprGeneral ',' exprGeneral • ')'

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    ':'  shift, and go to state 40
    ')'  shift, and go to state 73


State 70

   19 exprGeneral: exprGeneral • '+' exprGeneral
   20            | exprGeneral • '-' exprGeneral
   21            | exprGeneral • '*' exprGeneral
   22            | exprGeneral • ':' exprGeneral
   26            | POW '(' exprGeneral ',' exprGeneral • ')'

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    ':'  shift, and go to state 40
    ')'  shift, and go to state 74


State 71

   10 line: IF '(' exprBool ')' '{' • '\n' prog '}'
   13     | IF '(' exprBool ')' '{' • '\n' prog '}' ELSE '{' '\n' prog '}'

    '\n'  shift, and go to state 75


State 72

   11 line: WHILE '(' exprBool ')' '{' • '\n' prog '}'

    '\n'  shift, and go to state 76


State 73

   25 exprGeneral: MOD '(' exprGeneral ',' exprGeneral ')' •

    $default  reduce using rule 25 (exprGeneral)


State 74

   26 exprGeneral: POW '(' exprGeneral ',' exprGeneral ')' •

    $default  reduce using rule 26 (exprGeneral)


State 75

   10 line: IF '(' exprBool ')' '{' '\n' • prog '}'
   13     | IF '(' exprBool ')' '{' '\n' • prog '}' ELSE '{' '\n' prog '}'

    END         shift, and go to state 1
    ID          shift, and go to state 2
    REAL        shift, and go to state 3
    STRING      shift, and go to state 4
    FRACTION    shift, and go to state 5
    TYPE        shift, and go to state 6
    LOG         shift, and go to state 7
    RAD         shift, and go to state 8
    MOD         shift, and go to state 9
    POW         shift, and go to state 10
    IF          shift, and go to state 11
    THEN        shift, and go to state 12
    FOR         shift, and go to state 13
    TIMES       shift, and go to state 14
    FROM        shift, and go to state 15
    INCREASING  shift, and go to state 16
    DECREASING  shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    WHILE       shift, and go to state 19

    prog         go to state 77
    line         go to state 22
    exprGeneral  go to state 23
    exprBool     go to state 24


State 76

   11 line: WHILE '(' exprBool ')' '{' '\n' • prog '}'

    END         shift, and go to state 1
    ID          shift, and go to state 2
    REAL        shift, and go to state 3
    STRING      shift, and go to state 4
    FRACTION    shift, and go to state 5
    TYPE        shift, and go to state 6
    LOG         shift, and go to state 7
    RAD         shift, and go to state 8
    MOD         shift, and go to state 9
    POW         shift, and go to state 10
    IF          shift, and go to state 11
    THEN        shift, and go to state 12
    FOR         shift, and go to state 13
    TIMES       shift, and go to state 14
    FROM        shift, and go to state 15
    INCREASING  shift, and go to state 16
    DECREASING  shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    WHILE       shift, and go to state 19

    prog         go to state 78
    line         go to state 22
    exprGeneral  go to state 23
    exprBool     go to state 24


State 77

   10 line: IF '(' exprBool ')' '{' '\n' prog • '}'
   13     | IF '(' exprBool ')' '{' '\n' prog • '}' ELSE '{' '\n' prog '}'

    '}'  shift, and go to state 79


State 78

   11 line: WHILE '(' exprBool ')' '{' '\n' prog • '}'

    '}'  shift, and go to state 80


State 79

   10 line: IF '(' exprBool ')' '{' '\n' prog '}' •
   13     | IF '(' exprBool ')' '{' '\n' prog '}' • ELSE '{' '\n' prog '}'

    ELSE  shift, and go to state 81

    $default  reduce using rule 10 (line)


State 80

   11 line: WHILE '(' exprBool ')' '{' '\n' prog '}' •

    $default  reduce using rule 11 (line)


State 81

   13 line: IF '(' exprBool ')' '{' '\n' prog '}' ELSE • '{' '\n' prog '}'

    '{'  shift, and go to state 82


State 82

   13 line: IF '(' exprBool ')' '{' '\n' prog '}' ELSE '{' • '\n' prog '}'

    '\n'  shift, and go to state 83


State 83

   13 line: IF '(' exprBool ')' '{' '\n' prog '}' ELSE '{' '\n' • prog '}'

    END         shift, and go to state 1
    ID          shift, and go to state 2
    REAL        shift, and go to state 3
    STRING      shift, and go to state 4
    FRACTION    shift, and go to state 5
    TYPE        shift, and go to state 6
    LOG         shift, and go to state 7
    RAD         shift, and go to state 8
    MOD         shift, and go to state 9
    POW         shift, and go to state 10
    IF          shift, and go to state 11
    THEN        shift, and go to state 12
    FOR         shift, and go to state 13
    TIMES       shift, and go to state 14
    FROM        shift, and go to state 15
    INCREASING  shift, and go to state 16
    DECREASING  shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    WHILE       shift, and go to state 19

    prog         go to state 84
    line         go to state 22
    exprGeneral  go to state 23
    exprBool     go to state 24


State 84

   13 line: IF '(' exprBool ')' '{' '\n' prog '}' ELSE '{' '\n' prog • '}'

    '}'  shift, and go to state 85


State 85

   13 line: IF '(' exprBool ')' '{' '\n' prog '}' ELSE '{' '\n' prog '}' •

    $default  reduce using rule 13 (line)
