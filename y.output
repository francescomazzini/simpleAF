Terminals unused in grammar

    THEN
    FOR
    TIMES
    FROM
    INCREASING
    DECREASING


Grammar

    0 $accept: scope $end

    1 scope: prog

    2 prog: line ';' '\n' prog
    3     | line ';' '\n'
    4     | '\n' prog

    5 line: END '\n'
    6     | exprGeneral
    7     | TYPE ID '=' exprGeneral
    8     | ID '=' exprGeneral

    9 $@1: ε

   10 line: ID '=' '(' exprBool ')' '?' exprGeneral ':' exprGeneral $@1
   11     | BOOLEAN
   12     | exprBool

   13 $@2: ε

   14 line: IF '(' exprBool ')' '{' $@2 '\n' prog elseStatement

   15 $@3: ε

   16 line: WHILE '(' exprBool ')' '{' $@3 '\n' prog '}'

   17 $@4: ε

   18 $@5: ε

   19 elseStatement: '}' $@4 ELSE '{' '\n' $@5 prog '}'
   20              | '}'

   21 exprGeneral: exprGeneral '+' exprGeneral
   22            | exprGeneral '-' exprGeneral
   23            | exprGeneral '*' exprGeneral
   24            | exprGeneral ':' exprGeneral
   25            | RAD '(' exprGeneral ')'
   26            | LOG '(' exprGeneral ')'
   27            | MOD '(' exprGeneral ',' exprGeneral ')'
   28            | POW '(' exprGeneral ',' exprGeneral ')'
   29            | ID
   30            | REAL
   31            | FRACTION
   32            | STRING

   33 exprBool: exprGeneral '>' exprGeneral
   34         | exprGeneral '<' exprGeneral
   35         | exprGeneral EQ exprGeneral


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 2 3 4 5 14 16 19
    '(' (40) 10 14 16 25 26 27 28
    ')' (41) 10 14 16 25 26 27 28
    '*' (42) 23
    '+' (43) 21
    ',' (44) 27 28
    '-' (45) 22
    ':' (58) 10 24
    ';' (59) 2 3
    '<' (60) 34
    '=' (61) 7 8 10
    '>' (62) 33
    '?' (63) 10
    '{' (123) 14 16 19
    '}' (125) 16 19 20
    error (256)
    END (258) 5
    ID <lexeme> (259) 7 8 10 29
    REAL <value> (260) 30
    STRING <lexeme> (261) 32
    FRACTION <lexeme> (262) 31
    TYPE <lexeme> (263) 7
    LOG (264) 26
    RAD (265) 25
    MOD (266) 27
    POW (267) 28
    IF (268) 14
    THEN (269)
    ELSE (270) 19
    FOR (271)
    TIMES (272)
    FROM (273)
    INCREASING (274)
    DECREASING (275)
    BOOLEAN (276) 11
    EQ (277) 35
    WHILE (278) 16


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    scope (40)
        on left: 1
        on right: 0
    prog (41)
        on left: 2 3 4
        on right: 1 2 4 14 16 19
    line (42)
        on left: 5 6 7 8 10 11 12 14 16
        on right: 2 3
    $@1 (43)
        on left: 9
        on right: 10
    $@2 (44)
        on left: 13
        on right: 14
    $@3 (45)
        on left: 15
        on right: 16
    elseStatement (46)
        on left: 19 20
        on right: 14
    $@4 (47)
        on left: 17
        on right: 19
    $@5 (48)
        on left: 18
        on right: 19
    exprGeneral <id> (49)
        on left: 21 22 23 24 25 26 27 28 29 30 31 32
        on right: 6 7 8 10 21 22 23 24 25 26 27 28 33 34 35
    exprBool <boolean> (50)
        on left: 33 34 35
        on right: 10 12 14 16


State 0

    0 $accept: • scope $end

    END       shift, and go to state 1
    ID        shift, and go to state 2
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    TYPE      shift, and go to state 6
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10
    IF        shift, and go to state 11
    BOOLEAN   shift, and go to state 12
    WHILE     shift, and go to state 13
    '\n'      shift, and go to state 14

    scope        go to state 15
    prog         go to state 16
    line         go to state 17
    exprGeneral  go to state 18
    exprBool     go to state 19


State 1

    5 line: END • '\n'

    '\n'  shift, and go to state 20


State 2

    8 line: ID • '=' exprGeneral
   10     | ID • '=' '(' exprBool ')' '?' exprGeneral ':' exprGeneral $@1
   29 exprGeneral: ID •

    '='  shift, and go to state 21

    $default  reduce using rule 29 (exprGeneral)


State 3

   30 exprGeneral: REAL •

    $default  reduce using rule 30 (exprGeneral)


State 4

   32 exprGeneral: STRING •

    $default  reduce using rule 32 (exprGeneral)


State 5

   31 exprGeneral: FRACTION •

    $default  reduce using rule 31 (exprGeneral)


State 6

    7 line: TYPE • ID '=' exprGeneral

    ID  shift, and go to state 22


State 7

   26 exprGeneral: LOG • '(' exprGeneral ')'

    '('  shift, and go to state 23


State 8

   25 exprGeneral: RAD • '(' exprGeneral ')'

    '('  shift, and go to state 24


State 9

   27 exprGeneral: MOD • '(' exprGeneral ',' exprGeneral ')'

    '('  shift, and go to state 25


State 10

   28 exprGeneral: POW • '(' exprGeneral ',' exprGeneral ')'

    '('  shift, and go to state 26


State 11

   14 line: IF • '(' exprBool ')' '{' $@2 '\n' prog elseStatement

    '('  shift, and go to state 27


State 12

   11 line: BOOLEAN •

    $default  reduce using rule 11 (line)


State 13

   16 line: WHILE • '(' exprBool ')' '{' $@3 '\n' prog '}'

    '('  shift, and go to state 28


State 14

    4 prog: '\n' • prog

    END       shift, and go to state 1
    ID        shift, and go to state 2
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    TYPE      shift, and go to state 6
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10
    IF        shift, and go to state 11
    BOOLEAN   shift, and go to state 12
    WHILE     shift, and go to state 13
    '\n'      shift, and go to state 14

    prog         go to state 29
    line         go to state 17
    exprGeneral  go to state 18
    exprBool     go to state 19


State 15

    0 $accept: scope • $end

    $end  shift, and go to state 30


State 16

    1 scope: prog •

    $default  reduce using rule 1 (scope)


State 17

    2 prog: line • ';' '\n' prog
    3     | line • ';' '\n'

    ';'  shift, and go to state 31


State 18

    6 line: exprGeneral •
   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral
   33 exprBool: exprGeneral • '>' exprGeneral
   34         | exprGeneral • '<' exprGeneral
   35         | exprGeneral • EQ exprGeneral

    EQ   shift, and go to state 32
    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36
    '<'  shift, and go to state 37
    '>'  shift, and go to state 38

    $default  reduce using rule 6 (line)


State 19

   12 line: exprBool •

    $default  reduce using rule 12 (line)


State 20

    5 line: END '\n' •

    $default  reduce using rule 5 (line)


State 21

    8 line: ID '=' • exprGeneral
   10     | ID '=' • '(' exprBool ')' '?' exprGeneral ':' exprGeneral $@1

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10
    '('       shift, and go to state 40

    exprGeneral  go to state 41


State 22

    7 line: TYPE ID • '=' exprGeneral

    '='  shift, and go to state 42


State 23

   26 exprGeneral: LOG '(' • exprGeneral ')'

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 43


State 24

   25 exprGeneral: RAD '(' • exprGeneral ')'

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 44


State 25

   27 exprGeneral: MOD '(' • exprGeneral ',' exprGeneral ')'

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 45


State 26

   28 exprGeneral: POW '(' • exprGeneral ',' exprGeneral ')'

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 46


State 27

   14 line: IF '(' • exprBool ')' '{' $@2 '\n' prog elseStatement

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 47
    exprBool     go to state 48


State 28

   16 line: WHILE '(' • exprBool ')' '{' $@3 '\n' prog '}'

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 47
    exprBool     go to state 49


State 29

    4 prog: '\n' prog •

    $default  reduce using rule 4 (prog)


State 30

    0 $accept: scope $end •

    $default  accept


State 31

    2 prog: line ';' • '\n' prog
    3     | line ';' • '\n'

    '\n'  shift, and go to state 50


State 32

   35 exprBool: exprGeneral EQ • exprGeneral

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 51


State 33

   21 exprGeneral: exprGeneral '+' • exprGeneral

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 52


State 34

   22 exprGeneral: exprGeneral '-' • exprGeneral

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 53


State 35

   23 exprGeneral: exprGeneral '*' • exprGeneral

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 54


State 36

   24 exprGeneral: exprGeneral ':' • exprGeneral

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 55


State 37

   34 exprBool: exprGeneral '<' • exprGeneral

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 56


State 38

   33 exprBool: exprGeneral '>' • exprGeneral

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 57


State 39

   29 exprGeneral: ID •

    $default  reduce using rule 29 (exprGeneral)


State 40

   10 line: ID '=' '(' • exprBool ')' '?' exprGeneral ':' exprGeneral $@1

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 47
    exprBool     go to state 58


State 41

    8 line: ID '=' exprGeneral •
   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36

    $default  reduce using rule 8 (line)


State 42

    7 line: TYPE ID '=' • exprGeneral

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 59


State 43

   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral
   26            | LOG '(' exprGeneral • ')'

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36
    ')'  shift, and go to state 60


State 44

   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral
   25            | RAD '(' exprGeneral • ')'

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36
    ')'  shift, and go to state 61


State 45

   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral
   27            | MOD '(' exprGeneral • ',' exprGeneral ')'

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36
    ','  shift, and go to state 62


State 46

   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral
   28            | POW '(' exprGeneral • ',' exprGeneral ')'

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36
    ','  shift, and go to state 63


State 47

   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral
   33 exprBool: exprGeneral • '>' exprGeneral
   34         | exprGeneral • '<' exprGeneral
   35         | exprGeneral • EQ exprGeneral

    EQ   shift, and go to state 32
    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36
    '<'  shift, and go to state 37
    '>'  shift, and go to state 38


State 48

   14 line: IF '(' exprBool • ')' '{' $@2 '\n' prog elseStatement

    ')'  shift, and go to state 64


State 49

   16 line: WHILE '(' exprBool • ')' '{' $@3 '\n' prog '}'

    ')'  shift, and go to state 65


State 50

    2 prog: line ';' '\n' • prog
    3     | line ';' '\n' •

    END       shift, and go to state 1
    ID        shift, and go to state 2
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    TYPE      shift, and go to state 6
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10
    IF        shift, and go to state 11
    BOOLEAN   shift, and go to state 12
    WHILE     shift, and go to state 13
    '\n'      shift, and go to state 14

    $default  reduce using rule 3 (prog)

    prog         go to state 66
    line         go to state 17
    exprGeneral  go to state 18
    exprBool     go to state 19


State 51

   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral
   35 exprBool: exprGeneral EQ exprGeneral •

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36

    $default  reduce using rule 35 (exprBool)


State 52

   21 exprGeneral: exprGeneral • '+' exprGeneral
   21            | exprGeneral '+' exprGeneral •
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral

    '*'  shift, and go to state 35
    ':'  shift, and go to state 36

    $default  reduce using rule 21 (exprGeneral)


State 53

   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   22            | exprGeneral '-' exprGeneral •
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral

    '*'  shift, and go to state 35
    ':'  shift, and go to state 36

    $default  reduce using rule 22 (exprGeneral)


State 54

   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   23            | exprGeneral '*' exprGeneral •
   24            | exprGeneral • ':' exprGeneral

    $default  reduce using rule 23 (exprGeneral)


State 55

   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral
   24            | exprGeneral ':' exprGeneral •

    $default  reduce using rule 24 (exprGeneral)


State 56

   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral
   34 exprBool: exprGeneral '<' exprGeneral •

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36

    $default  reduce using rule 34 (exprBool)


State 57

   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral
   33 exprBool: exprGeneral '>' exprGeneral •

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36

    $default  reduce using rule 33 (exprBool)


State 58

   10 line: ID '=' '(' exprBool • ')' '?' exprGeneral ':' exprGeneral $@1

    ')'  shift, and go to state 67


State 59

    7 line: TYPE ID '=' exprGeneral •
   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36

    $default  reduce using rule 7 (line)


State 60

   26 exprGeneral: LOG '(' exprGeneral ')' •

    $default  reduce using rule 26 (exprGeneral)


State 61

   25 exprGeneral: RAD '(' exprGeneral ')' •

    $default  reduce using rule 25 (exprGeneral)


State 62

   27 exprGeneral: MOD '(' exprGeneral ',' • exprGeneral ')'

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 68


State 63

   28 exprGeneral: POW '(' exprGeneral ',' • exprGeneral ')'

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 69


State 64

   14 line: IF '(' exprBool ')' • '{' $@2 '\n' prog elseStatement

    '{'  shift, and go to state 70


State 65

   16 line: WHILE '(' exprBool ')' • '{' $@3 '\n' prog '}'

    '{'  shift, and go to state 71


State 66

    2 prog: line ';' '\n' prog •

    $default  reduce using rule 2 (prog)


State 67

   10 line: ID '=' '(' exprBool ')' • '?' exprGeneral ':' exprGeneral $@1

    '?'  shift, and go to state 72


State 68

   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral
   27            | MOD '(' exprGeneral ',' exprGeneral • ')'

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36
    ')'  shift, and go to state 73


State 69

   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral
   28            | POW '(' exprGeneral ',' exprGeneral • ')'

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36
    ')'  shift, and go to state 74


State 70

   14 line: IF '(' exprBool ')' '{' • $@2 '\n' prog elseStatement

    $default  reduce using rule 13 ($@2)

    $@2  go to state 75


State 71

   16 line: WHILE '(' exprBool ')' '{' • $@3 '\n' prog '}'

    $default  reduce using rule 15 ($@3)

    $@3  go to state 76


State 72

   10 line: ID '=' '(' exprBool ')' '?' • exprGeneral ':' exprGeneral $@1

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 77


State 73

   27 exprGeneral: MOD '(' exprGeneral ',' exprGeneral ')' •

    $default  reduce using rule 27 (exprGeneral)


State 74

   28 exprGeneral: POW '(' exprGeneral ',' exprGeneral ')' •

    $default  reduce using rule 28 (exprGeneral)


State 75

   14 line: IF '(' exprBool ')' '{' $@2 • '\n' prog elseStatement

    '\n'  shift, and go to state 78


State 76

   16 line: WHILE '(' exprBool ')' '{' $@3 • '\n' prog '}'

    '\n'  shift, and go to state 79


State 77

   10 line: ID '=' '(' exprBool ')' '?' exprGeneral • ':' exprGeneral $@1
   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 80


State 78

   14 line: IF '(' exprBool ')' '{' $@2 '\n' • prog elseStatement

    END       shift, and go to state 1
    ID        shift, and go to state 2
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    TYPE      shift, and go to state 6
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10
    IF        shift, and go to state 11
    BOOLEAN   shift, and go to state 12
    WHILE     shift, and go to state 13
    '\n'      shift, and go to state 14

    prog         go to state 81
    line         go to state 17
    exprGeneral  go to state 18
    exprBool     go to state 19


State 79

   16 line: WHILE '(' exprBool ')' '{' $@3 '\n' • prog '}'

    END       shift, and go to state 1
    ID        shift, and go to state 2
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    TYPE      shift, and go to state 6
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10
    IF        shift, and go to state 11
    BOOLEAN   shift, and go to state 12
    WHILE     shift, and go to state 13
    '\n'      shift, and go to state 14

    prog         go to state 82
    line         go to state 17
    exprGeneral  go to state 18
    exprBool     go to state 19


State 80

   10 line: ID '=' '(' exprBool ')' '?' exprGeneral ':' • exprGeneral $@1
   24 exprGeneral: exprGeneral ':' • exprGeneral

    ID        shift, and go to state 39
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    exprGeneral  go to state 83


State 81

   14 line: IF '(' exprBool ')' '{' $@2 '\n' prog • elseStatement

    '}'  shift, and go to state 84

    elseStatement  go to state 85


State 82

   16 line: WHILE '(' exprBool ')' '{' $@3 '\n' prog • '}'

    '}'  shift, and go to state 86


State 83

   10 line: ID '=' '(' exprBool ')' '?' exprGeneral ':' exprGeneral • $@1
   21 exprGeneral: exprGeneral • '+' exprGeneral
   22            | exprGeneral • '-' exprGeneral
   23            | exprGeneral • '*' exprGeneral
   24            | exprGeneral • ':' exprGeneral
   24            | exprGeneral ':' exprGeneral •

    ';'       reduce using rule 9 ($@1)
    $default  reduce using rule 24 (exprGeneral)

    $@1  go to state 87


State 84

   19 elseStatement: '}' • $@4 ELSE '{' '\n' $@5 prog '}'
   20              | '}' •

    ';'       reduce using rule 20 (elseStatement)
    $default  reduce using rule 17 ($@4)

    $@4  go to state 88


State 85

   14 line: IF '(' exprBool ')' '{' $@2 '\n' prog elseStatement •

    $default  reduce using rule 14 (line)


State 86

   16 line: WHILE '(' exprBool ')' '{' $@3 '\n' prog '}' •

    $default  reduce using rule 16 (line)


State 87

   10 line: ID '=' '(' exprBool ')' '?' exprGeneral ':' exprGeneral $@1 •

    $default  reduce using rule 10 (line)


State 88

   19 elseStatement: '}' $@4 • ELSE '{' '\n' $@5 prog '}'

    ELSE  shift, and go to state 89


State 89

   19 elseStatement: '}' $@4 ELSE • '{' '\n' $@5 prog '}'

    '{'  shift, and go to state 90


State 90

   19 elseStatement: '}' $@4 ELSE '{' • '\n' $@5 prog '}'

    '\n'  shift, and go to state 91


State 91

   19 elseStatement: '}' $@4 ELSE '{' '\n' • $@5 prog '}'

    $default  reduce using rule 18 ($@5)

    $@5  go to state 92


State 92

   19 elseStatement: '}' $@4 ELSE '{' '\n' $@5 • prog '}'

    END       shift, and go to state 1
    ID        shift, and go to state 2
    REAL      shift, and go to state 3
    STRING    shift, and go to state 4
    FRACTION  shift, and go to state 5
    TYPE      shift, and go to state 6
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10
    IF        shift, and go to state 11
    BOOLEAN   shift, and go to state 12
    WHILE     shift, and go to state 13
    '\n'      shift, and go to state 14

    prog         go to state 93
    line         go to state 17
    exprGeneral  go to state 18
    exprBool     go to state 19


State 93

   19 elseStatement: '}' $@4 ELSE '{' '\n' $@5 prog • '}'

    '}'  shift, and go to state 94


State 94

   19 elseStatement: '}' $@4 ELSE '{' '\n' $@5 prog '}' •

    $default  reduce using rule 19 (elseStatement)
