State 2 conflicts: 12 reduce/reduce
State 4 conflicts: 2 reduce/reduce
State 5 conflicts: 2 reduce/reduce
State 45 conflicts: 10 reduce/reduce


Grammar

    0 $accept: scope $end

    1 scope: prog

    2 prog: line ';' '\n' prog
    3     | line

    4 line: END '\n'
    5     | TYPE ID '=' expr
    6     | TYPE ID '=' exprStrings
    7     | TYPE ID '=' exprFraction
    8     | ID '=' expr
    9     | ID '=' exprStrings
   10     | ID '=' exprFraction
   11     | BOOLEAN
   12     | expr
   13     | exprFraction
   14     | exprStrings
   15     | STRING
   16     | ID
   17     | IF
   18     | THEN
   19     | ELSE
   20     | FOR
   21     | TIMES
   22     | FROM
   23     | INCREASING
   24     | DECREASING
   25     | FRACTION

   26 expr: expr '+' expr
   27     | expr '-' expr
   28     | expr '*' expr
   29     | expr ':' expr
   30     | RAD '(' expr ')'
   31     | LOG '(' expr ')'
   32     | MOD '(' expr ',' expr ')'
   33     | POW '(' expr ',' expr ')'
   34     | REAL
   35     | ID

   36 exprFraction: exprFraction '+' exprFraction
   37             | exprFraction '-' exprFraction
   38             | exprFraction '*' exprFraction
   39             | exprFraction ':' exprFraction
   40             | FRACTION
   41             | ID

   42 exprStrings: exprStrings '+' exprStrings
   43            | exprStrings '*' expr
   44            | STRING
   45            | ID


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 2 4
    '(' (40) 30 31 32 33
    ')' (41) 30 31 32 33
    '*' (42) 28 38 43
    '+' (43) 26 36 42
    ',' (44) 32 33
    '-' (45) 27 37
    ':' (58) 29 39
    ';' (59) 2
    '=' (61) 5 6 7 8 9 10
    error (256)
    END (258) 4
    ID <lexeme> (259) 5 6 7 8 9 10 16 35 41 45
    REAL <value> (260) 34
    STRING <lexeme> (261) 15 44
    FRACTION <lexeme> (262) 25 40
    TYPE <lexeme> (263) 5 6 7
    LOG (264) 31
    RAD (265) 30
    MOD (266) 32
    POW (267) 33
    IF (268) 17
    THEN (269) 18
    ELSE (270) 19
    FOR (271) 20
    TIMES (272) 21
    FROM (273) 22
    INCREASING (274) 23
    DECREASING (275) 24
    BOOLEAN (276) 11


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    scope (33)
        on left: 1
        on right: 0
    prog (34)
        on left: 2 3
        on right: 1 2
    line (35)
        on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
        on right: 2 3
    expr <value> (36)
        on left: 26 27 28 29 30 31 32 33 34 35
        on right: 5 8 12 26 27 28 29 30 31 32 33 43
    exprFraction <lexeme> (37)
        on left: 36 37 38 39 40 41
        on right: 7 10 13 36 37 38 39
    exprStrings <lexeme> (38)
        on left: 42 43 44 45
        on right: 6 9 14 42 43


State 0

    0 $accept: • scope $end

    END         shift, and go to state 1
    ID          shift, and go to state 2
    REAL        shift, and go to state 3
    STRING      shift, and go to state 4
    FRACTION    shift, and go to state 5
    TYPE        shift, and go to state 6
    LOG         shift, and go to state 7
    RAD         shift, and go to state 8
    MOD         shift, and go to state 9
    POW         shift, and go to state 10
    IF          shift, and go to state 11
    THEN        shift, and go to state 12
    ELSE        shift, and go to state 13
    FOR         shift, and go to state 14
    TIMES       shift, and go to state 15
    FROM        shift, and go to state 16
    INCREASING  shift, and go to state 17
    DECREASING  shift, and go to state 18
    BOOLEAN     shift, and go to state 19

    scope         go to state 20
    prog          go to state 21
    line          go to state 22
    expr          go to state 23
    exprFraction  go to state 24
    exprStrings   go to state 25


State 1

    4 line: END • '\n'

    '\n'  shift, and go to state 26


State 2

    8 line: ID • '=' expr
    9     | ID • '=' exprStrings
   10     | ID • '=' exprFraction
   16     | ID •
   35 expr: ID •
   41 exprFraction: ID •
   45 exprStrings: ID •

    '='  shift, and go to state 27

    $end      reduce using rule 16 (line)
    $end      [reduce using rule 35 (expr)]
    $end      [reduce using rule 41 (exprFraction)]
    $end      [reduce using rule 45 (exprStrings)]
    '+'       reduce using rule 35 (expr)
    '+'       [reduce using rule 41 (exprFraction)]
    '+'       [reduce using rule 45 (exprStrings)]
    '-'       reduce using rule 35 (expr)
    '-'       [reduce using rule 41 (exprFraction)]
    '*'       reduce using rule 35 (expr)
    '*'       [reduce using rule 41 (exprFraction)]
    '*'       [reduce using rule 45 (exprStrings)]
    ':'       reduce using rule 35 (expr)
    ':'       [reduce using rule 41 (exprFraction)]
    ';'       reduce using rule 16 (line)
    ';'       [reduce using rule 35 (expr)]
    ';'       [reduce using rule 41 (exprFraction)]
    ';'       [reduce using rule 45 (exprStrings)]
    $default  reduce using rule 35 (expr)


State 3

   34 expr: REAL •

    $default  reduce using rule 34 (expr)


State 4

   15 line: STRING •
   44 exprStrings: STRING •

    $end      reduce using rule 15 (line)
    $end      [reduce using rule 44 (exprStrings)]
    '+'       reduce using rule 44 (exprStrings)
    '*'       reduce using rule 44 (exprStrings)
    ';'       reduce using rule 15 (line)
    ';'       [reduce using rule 44 (exprStrings)]
    $default  reduce using rule 15 (line)


State 5

   25 line: FRACTION •
   40 exprFraction: FRACTION •

    $end      reduce using rule 25 (line)
    $end      [reduce using rule 40 (exprFraction)]
    ';'       reduce using rule 25 (line)
    ';'       [reduce using rule 40 (exprFraction)]
    $default  reduce using rule 40 (exprFraction)


State 6

    5 line: TYPE • ID '=' expr
    6     | TYPE • ID '=' exprStrings
    7     | TYPE • ID '=' exprFraction

    ID  shift, and go to state 28


State 7

   31 expr: LOG • '(' expr ')'

    '('  shift, and go to state 29


State 8

   30 expr: RAD • '(' expr ')'

    '('  shift, and go to state 30


State 9

   32 expr: MOD • '(' expr ',' expr ')'

    '('  shift, and go to state 31


State 10

   33 expr: POW • '(' expr ',' expr ')'

    '('  shift, and go to state 32


State 11

   17 line: IF •

    $default  reduce using rule 17 (line)


State 12

   18 line: THEN •

    $default  reduce using rule 18 (line)


State 13

   19 line: ELSE •

    $default  reduce using rule 19 (line)


State 14

   20 line: FOR •

    $default  reduce using rule 20 (line)


State 15

   21 line: TIMES •

    $default  reduce using rule 21 (line)


State 16

   22 line: FROM •

    $default  reduce using rule 22 (line)


State 17

   23 line: INCREASING •

    $default  reduce using rule 23 (line)


State 18

   24 line: DECREASING •

    $default  reduce using rule 24 (line)


State 19

   11 line: BOOLEAN •

    $default  reduce using rule 11 (line)


State 20

    0 $accept: scope • $end

    $end  shift, and go to state 33


State 21

    1 scope: prog •

    $default  reduce using rule 1 (scope)


State 22

    2 prog: line • ';' '\n' prog
    3     | line •

    ';'  shift, and go to state 34

    $default  reduce using rule 3 (prog)


State 23

   12 line: expr •
   26 expr: expr • '+' expr
   27     | expr • '-' expr
   28     | expr • '*' expr
   29     | expr • ':' expr

    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    ':'  shift, and go to state 38

    $default  reduce using rule 12 (line)


State 24

   13 line: exprFraction •
   36 exprFraction: exprFraction • '+' exprFraction
   37             | exprFraction • '-' exprFraction
   38             | exprFraction • '*' exprFraction
   39             | exprFraction • ':' exprFraction

    '+'  shift, and go to state 39
    '-'  shift, and go to state 40
    '*'  shift, and go to state 41
    ':'  shift, and go to state 42

    $default  reduce using rule 13 (line)


State 25

   14 line: exprStrings •
   42 exprStrings: exprStrings • '+' exprStrings
   43            | exprStrings • '*' expr

    '+'  shift, and go to state 43
    '*'  shift, and go to state 44

    $default  reduce using rule 14 (line)


State 26

    4 line: END '\n' •

    $default  reduce using rule 4 (line)


State 27

    8 line: ID '=' • expr
    9     | ID '=' • exprStrings
   10     | ID '=' • exprFraction

    ID        shift, and go to state 45
    REAL      shift, and go to state 3
    STRING    shift, and go to state 46
    FRACTION  shift, and go to state 47
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    expr          go to state 48
    exprFraction  go to state 49
    exprStrings   go to state 50


State 28

    5 line: TYPE ID • '=' expr
    6     | TYPE ID • '=' exprStrings
    7     | TYPE ID • '=' exprFraction

    '='  shift, and go to state 51


State 29

   31 expr: LOG '(' • expr ')'

    ID    shift, and go to state 52
    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 53


State 30

   30 expr: RAD '(' • expr ')'

    ID    shift, and go to state 52
    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 54


State 31

   32 expr: MOD '(' • expr ',' expr ')'

    ID    shift, and go to state 52
    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 55


State 32

   33 expr: POW '(' • expr ',' expr ')'

    ID    shift, and go to state 52
    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 56


State 33

    0 $accept: scope $end •

    $default  accept


State 34

    2 prog: line ';' • '\n' prog

    '\n'  shift, and go to state 57


State 35

   26 expr: expr '+' • expr

    ID    shift, and go to state 52
    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 58


State 36

   27 expr: expr '-' • expr

    ID    shift, and go to state 52
    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 59


State 37

   28 expr: expr '*' • expr

    ID    shift, and go to state 52
    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 60


State 38

   29 expr: expr ':' • expr

    ID    shift, and go to state 52
    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 61


State 39

   36 exprFraction: exprFraction '+' • exprFraction

    ID        shift, and go to state 62
    FRACTION  shift, and go to state 47

    exprFraction  go to state 63


State 40

   37 exprFraction: exprFraction '-' • exprFraction

    ID        shift, and go to state 62
    FRACTION  shift, and go to state 47

    exprFraction  go to state 64


State 41

   38 exprFraction: exprFraction '*' • exprFraction

    ID        shift, and go to state 62
    FRACTION  shift, and go to state 47

    exprFraction  go to state 65


State 42

   39 exprFraction: exprFraction ':' • exprFraction

    ID        shift, and go to state 62
    FRACTION  shift, and go to state 47

    exprFraction  go to state 66


State 43

   42 exprStrings: exprStrings '+' • exprStrings

    ID      shift, and go to state 67
    STRING  shift, and go to state 46

    exprStrings  go to state 68


State 44

   43 exprStrings: exprStrings '*' • expr

    ID    shift, and go to state 52
    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 69


State 45

   35 expr: ID •
   41 exprFraction: ID •
   45 exprStrings: ID •

    $end      reduce using rule 35 (expr)
    $end      [reduce using rule 41 (exprFraction)]
    $end      [reduce using rule 45 (exprStrings)]
    '+'       reduce using rule 35 (expr)
    '+'       [reduce using rule 41 (exprFraction)]
    '+'       [reduce using rule 45 (exprStrings)]
    '-'       reduce using rule 35 (expr)
    '-'       [reduce using rule 41 (exprFraction)]
    '*'       reduce using rule 35 (expr)
    '*'       [reduce using rule 41 (exprFraction)]
    '*'       [reduce using rule 45 (exprStrings)]
    ':'       reduce using rule 35 (expr)
    ':'       [reduce using rule 41 (exprFraction)]
    ';'       reduce using rule 35 (expr)
    ';'       [reduce using rule 41 (exprFraction)]
    ';'       [reduce using rule 45 (exprStrings)]
    $default  reduce using rule 35 (expr)


State 46

   44 exprStrings: STRING •

    $default  reduce using rule 44 (exprStrings)


State 47

   40 exprFraction: FRACTION •

    $default  reduce using rule 40 (exprFraction)


State 48

    8 line: ID '=' expr •
   26 expr: expr • '+' expr
   27     | expr • '-' expr
   28     | expr • '*' expr
   29     | expr • ':' expr

    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    ':'  shift, and go to state 38

    $default  reduce using rule 8 (line)


State 49

   10 line: ID '=' exprFraction •
   36 exprFraction: exprFraction • '+' exprFraction
   37             | exprFraction • '-' exprFraction
   38             | exprFraction • '*' exprFraction
   39             | exprFraction • ':' exprFraction

    '+'  shift, and go to state 39
    '-'  shift, and go to state 40
    '*'  shift, and go to state 41
    ':'  shift, and go to state 42

    $default  reduce using rule 10 (line)


State 50

    9 line: ID '=' exprStrings •
   42 exprStrings: exprStrings • '+' exprStrings
   43            | exprStrings • '*' expr

    '+'  shift, and go to state 43
    '*'  shift, and go to state 44

    $default  reduce using rule 9 (line)


State 51

    5 line: TYPE ID '=' • expr
    6     | TYPE ID '=' • exprStrings
    7     | TYPE ID '=' • exprFraction

    ID        shift, and go to state 45
    REAL      shift, and go to state 3
    STRING    shift, and go to state 46
    FRACTION  shift, and go to state 47
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    expr          go to state 70
    exprFraction  go to state 71
    exprStrings   go to state 72


State 52

   35 expr: ID •

    $default  reduce using rule 35 (expr)


State 53

   26 expr: expr • '+' expr
   27     | expr • '-' expr
   28     | expr • '*' expr
   29     | expr • ':' expr
   31     | LOG '(' expr • ')'

    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    ':'  shift, and go to state 38
    ')'  shift, and go to state 73


State 54

   26 expr: expr • '+' expr
   27     | expr • '-' expr
   28     | expr • '*' expr
   29     | expr • ':' expr
   30     | RAD '(' expr • ')'

    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    ':'  shift, and go to state 38
    ')'  shift, and go to state 74


State 55

   26 expr: expr • '+' expr
   27     | expr • '-' expr
   28     | expr • '*' expr
   29     | expr • ':' expr
   32     | MOD '(' expr • ',' expr ')'

    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    ':'  shift, and go to state 38
    ','  shift, and go to state 75


State 56

   26 expr: expr • '+' expr
   27     | expr • '-' expr
   28     | expr • '*' expr
   29     | expr • ':' expr
   33     | POW '(' expr • ',' expr ')'

    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    ':'  shift, and go to state 38
    ','  shift, and go to state 76


State 57

    2 prog: line ';' '\n' • prog

    END         shift, and go to state 1
    ID          shift, and go to state 2
    REAL        shift, and go to state 3
    STRING      shift, and go to state 4
    FRACTION    shift, and go to state 5
    TYPE        shift, and go to state 6
    LOG         shift, and go to state 7
    RAD         shift, and go to state 8
    MOD         shift, and go to state 9
    POW         shift, and go to state 10
    IF          shift, and go to state 11
    THEN        shift, and go to state 12
    ELSE        shift, and go to state 13
    FOR         shift, and go to state 14
    TIMES       shift, and go to state 15
    FROM        shift, and go to state 16
    INCREASING  shift, and go to state 17
    DECREASING  shift, and go to state 18
    BOOLEAN     shift, and go to state 19

    prog          go to state 77
    line          go to state 22
    expr          go to state 23
    exprFraction  go to state 24
    exprStrings   go to state 25


State 58

   26 expr: expr • '+' expr
   26     | expr '+' expr •
   27     | expr • '-' expr
   28     | expr • '*' expr
   29     | expr • ':' expr

    '*'  shift, and go to state 37
    ':'  shift, and go to state 38

    $default  reduce using rule 26 (expr)


State 59

   26 expr: expr • '+' expr
   27     | expr • '-' expr
   27     | expr '-' expr •
   28     | expr • '*' expr
   29     | expr • ':' expr

    '*'  shift, and go to state 37
    ':'  shift, and go to state 38

    $default  reduce using rule 27 (expr)


State 60

   26 expr: expr • '+' expr
   27     | expr • '-' expr
   28     | expr • '*' expr
   28     | expr '*' expr •
   29     | expr • ':' expr

    $default  reduce using rule 28 (expr)


State 61

   26 expr: expr • '+' expr
   27     | expr • '-' expr
   28     | expr • '*' expr
   29     | expr • ':' expr
   29     | expr ':' expr •

    $default  reduce using rule 29 (expr)


State 62

   41 exprFraction: ID •

    $default  reduce using rule 41 (exprFraction)


State 63

   36 exprFraction: exprFraction • '+' exprFraction
   36             | exprFraction '+' exprFraction •
   37             | exprFraction • '-' exprFraction
   38             | exprFraction • '*' exprFraction
   39             | exprFraction • ':' exprFraction

    '*'  shift, and go to state 41
    ':'  shift, and go to state 42

    $default  reduce using rule 36 (exprFraction)


State 64

   36 exprFraction: exprFraction • '+' exprFraction
   37             | exprFraction • '-' exprFraction
   37             | exprFraction '-' exprFraction •
   38             | exprFraction • '*' exprFraction
   39             | exprFraction • ':' exprFraction

    '*'  shift, and go to state 41
    ':'  shift, and go to state 42

    $default  reduce using rule 37 (exprFraction)


State 65

   36 exprFraction: exprFraction • '+' exprFraction
   37             | exprFraction • '-' exprFraction
   38             | exprFraction • '*' exprFraction
   38             | exprFraction '*' exprFraction •
   39             | exprFraction • ':' exprFraction

    $default  reduce using rule 38 (exprFraction)


State 66

   36 exprFraction: exprFraction • '+' exprFraction
   37             | exprFraction • '-' exprFraction
   38             | exprFraction • '*' exprFraction
   39             | exprFraction • ':' exprFraction
   39             | exprFraction ':' exprFraction •

    $default  reduce using rule 39 (exprFraction)


State 67

   45 exprStrings: ID •

    $default  reduce using rule 45 (exprStrings)


State 68

   42 exprStrings: exprStrings • '+' exprStrings
   42            | exprStrings '+' exprStrings •
   43            | exprStrings • '*' expr

    '*'  shift, and go to state 44

    $default  reduce using rule 42 (exprStrings)


State 69

   26 expr: expr • '+' expr
   27     | expr • '-' expr
   28     | expr • '*' expr
   29     | expr • ':' expr
   43 exprStrings: exprStrings '*' expr •

    '-'  shift, and go to state 36
    ':'  shift, and go to state 38

    $default  reduce using rule 43 (exprStrings)


State 70

    5 line: TYPE ID '=' expr •
   26 expr: expr • '+' expr
   27     | expr • '-' expr
   28     | expr • '*' expr
   29     | expr • ':' expr

    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    ':'  shift, and go to state 38

    $default  reduce using rule 5 (line)


State 71

    7 line: TYPE ID '=' exprFraction •
   36 exprFraction: exprFraction • '+' exprFraction
   37             | exprFraction • '-' exprFraction
   38             | exprFraction • '*' exprFraction
   39             | exprFraction • ':' exprFraction

    '+'  shift, and go to state 39
    '-'  shift, and go to state 40
    '*'  shift, and go to state 41
    ':'  shift, and go to state 42

    $default  reduce using rule 7 (line)


State 72

    6 line: TYPE ID '=' exprStrings •
   42 exprStrings: exprStrings • '+' exprStrings
   43            | exprStrings • '*' expr

    '+'  shift, and go to state 43
    '*'  shift, and go to state 44

    $default  reduce using rule 6 (line)


State 73

   31 expr: LOG '(' expr ')' •

    $default  reduce using rule 31 (expr)


State 74

   30 expr: RAD '(' expr ')' •

    $default  reduce using rule 30 (expr)


State 75

   32 expr: MOD '(' expr ',' • expr ')'

    ID    shift, and go to state 52
    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 78


State 76

   33 expr: POW '(' expr ',' • expr ')'

    ID    shift, and go to state 52
    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 79


State 77

    2 prog: line ';' '\n' prog •

    $default  reduce using rule 2 (prog)


State 78

   26 expr: expr • '+' expr
   27     | expr • '-' expr
   28     | expr • '*' expr
   29     | expr • ':' expr
   32     | MOD '(' expr ',' expr • ')'

    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    ':'  shift, and go to state 38
    ')'  shift, and go to state 80


State 79

   26 expr: expr • '+' expr
   27     | expr • '-' expr
   28     | expr • '*' expr
   29     | expr • ':' expr
   33     | POW '(' expr ',' expr • ')'

    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    ':'  shift, and go to state 38
    ')'  shift, and go to state 81


State 80

   32 expr: MOD '(' expr ',' expr ')' •

    $default  reduce using rule 32 (expr)


State 81

   33 expr: POW '(' expr ',' expr ')' •

    $default  reduce using rule 33 (expr)
