State 4 conflicts: 2 reduce/reduce
State 5 conflicts: 2 reduce/reduce


Grammar

    0 $accept: scope $end

    1 scope: prog

    2 prog: line ';' '\n' prog
    3     | line

    4 line: TYPE ID '=' expr
    5     | TYPE ID '=' exprStrings
    6     | TYPE ID '=' exprFraction
    7     | ID '=' expr
    8     | ID '=' exprStrings
    9     | ID '=' exprFraction
   10     | expr
   11     | exprFraction
   12     | exprStrings
   13     | STRING
   14     | ID
   15     | END '\n'
   16     | IF
   17     | THEN
   18     | ELSE
   19     | FOR
   20     | TIMES
   21     | FROM
   22     | INCREASING
   23     | DECREASING
   24     | FRACTION

   25 expr: expr '+' expr
   26     | expr '-' expr
   27     | expr '*' expr
   28     | expr ':' expr
   29     | RAD '(' expr ')'
   30     | LOG '(' expr ')'
   31     | MOD '(' expr ',' expr ')'
   32     | POW '(' expr ',' expr ')'
   33     | REAL

   34 exprFraction: exprFraction '+' exprFraction
   35             | exprFraction '-' exprFraction
   36             | exprFraction '*' exprFraction
   37             | exprFraction ':' exprFraction
   38             | FRACTION

   39 exprStrings: exprStrings '+' exprStrings
   40            | exprStrings '*' REAL
   41            | STRING


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 2 15
    '(' (40) 29 30 31 32
    ')' (41) 29 30 31 32
    '*' (42) 27 36 40
    '+' (43) 25 34 39
    ',' (44) 31 32
    '-' (45) 26 35
    ':' (58) 28 37
    ';' (59) 2
    '=' (61) 4 5 6 7 8 9
    error (256)
    END (258) 15
    ID <lexeme> (259) 4 5 6 7 8 9 14
    REAL <value> (260) 33 40
    STRING <lexeme> (261) 13 41
    FRACTION <lexeme> (262) 24 38
    TYPE <lexeme> (263) 4 5 6
    LOG (264) 30
    RAD (265) 29
    MOD (266) 31
    POW (267) 32
    IF (268) 16
    THEN (269) 17
    ELSE (270) 18
    FOR (271) 19
    TIMES (272) 20
    FROM (273) 21
    INCREASING (274) 22
    DECREASING (275) 23


Nonterminals, with rules where they appear

    $accept (31)
        on left: 0
    scope (32)
        on left: 1
        on right: 0
    prog (33)
        on left: 2 3
        on right: 1 2
    line (34)
        on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
        on right: 2 3
    expr <value> (35)
        on left: 25 26 27 28 29 30 31 32 33
        on right: 4 7 10 25 26 27 28 29 30 31 32
    exprFraction <lexeme> (36)
        on left: 34 35 36 37 38
        on right: 6 9 11 34 35 36 37
    exprStrings <lexeme> (37)
        on left: 39 40 41
        on right: 5 8 12 39 40


State 0

    0 $accept: • scope $end

    END         shift, and go to state 1
    ID          shift, and go to state 2
    REAL        shift, and go to state 3
    STRING      shift, and go to state 4
    FRACTION    shift, and go to state 5
    TYPE        shift, and go to state 6
    LOG         shift, and go to state 7
    RAD         shift, and go to state 8
    MOD         shift, and go to state 9
    POW         shift, and go to state 10
    IF          shift, and go to state 11
    THEN        shift, and go to state 12
    ELSE        shift, and go to state 13
    FOR         shift, and go to state 14
    TIMES       shift, and go to state 15
    FROM        shift, and go to state 16
    INCREASING  shift, and go to state 17
    DECREASING  shift, and go to state 18

    scope         go to state 19
    prog          go to state 20
    line          go to state 21
    expr          go to state 22
    exprFraction  go to state 23
    exprStrings   go to state 24


State 1

   15 line: END • '\n'

    '\n'  shift, and go to state 25


State 2

    7 line: ID • '=' expr
    8     | ID • '=' exprStrings
    9     | ID • '=' exprFraction
   14     | ID •

    '='  shift, and go to state 26

    $default  reduce using rule 14 (line)


State 3

   33 expr: REAL •

    $default  reduce using rule 33 (expr)


State 4

   13 line: STRING •
   41 exprStrings: STRING •

    $end      reduce using rule 13 (line)
    $end      [reduce using rule 41 (exprStrings)]
    '+'       reduce using rule 41 (exprStrings)
    '*'       reduce using rule 41 (exprStrings)
    ';'       reduce using rule 13 (line)
    ';'       [reduce using rule 41 (exprStrings)]
    $default  reduce using rule 13 (line)


State 5

   24 line: FRACTION •
   38 exprFraction: FRACTION •

    $end      reduce using rule 24 (line)
    $end      [reduce using rule 38 (exprFraction)]
    ';'       reduce using rule 24 (line)
    ';'       [reduce using rule 38 (exprFraction)]
    $default  reduce using rule 38 (exprFraction)


State 6

    4 line: TYPE • ID '=' expr
    5     | TYPE • ID '=' exprStrings
    6     | TYPE • ID '=' exprFraction

    ID  shift, and go to state 27


State 7

   30 expr: LOG • '(' expr ')'

    '('  shift, and go to state 28


State 8

   29 expr: RAD • '(' expr ')'

    '('  shift, and go to state 29


State 9

   31 expr: MOD • '(' expr ',' expr ')'

    '('  shift, and go to state 30


State 10

   32 expr: POW • '(' expr ',' expr ')'

    '('  shift, and go to state 31


State 11

   16 line: IF •

    $default  reduce using rule 16 (line)


State 12

   17 line: THEN •

    $default  reduce using rule 17 (line)


State 13

   18 line: ELSE •

    $default  reduce using rule 18 (line)


State 14

   19 line: FOR •

    $default  reduce using rule 19 (line)


State 15

   20 line: TIMES •

    $default  reduce using rule 20 (line)


State 16

   21 line: FROM •

    $default  reduce using rule 21 (line)


State 17

   22 line: INCREASING •

    $default  reduce using rule 22 (line)


State 18

   23 line: DECREASING •

    $default  reduce using rule 23 (line)


State 19

    0 $accept: scope • $end

    $end  shift, and go to state 32


State 20

    1 scope: prog •

    $default  reduce using rule 1 (scope)


State 21

    2 prog: line • ';' '\n' prog
    3     | line •

    ';'  shift, and go to state 33

    $default  reduce using rule 3 (prog)


State 22

   10 line: expr •
   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    ':'  shift, and go to state 37

    $default  reduce using rule 10 (line)


State 23

   11 line: exprFraction •
   34 exprFraction: exprFraction • '+' exprFraction
   35             | exprFraction • '-' exprFraction
   36             | exprFraction • '*' exprFraction
   37             | exprFraction • ':' exprFraction

    '+'  shift, and go to state 38
    '-'  shift, and go to state 39
    '*'  shift, and go to state 40
    ':'  shift, and go to state 41

    $default  reduce using rule 11 (line)


State 24

   12 line: exprStrings •
   39 exprStrings: exprStrings • '+' exprStrings
   40            | exprStrings • '*' REAL

    '+'  shift, and go to state 42
    '*'  shift, and go to state 43

    $default  reduce using rule 12 (line)


State 25

   15 line: END '\n' •

    $default  reduce using rule 15 (line)


State 26

    7 line: ID '=' • expr
    8     | ID '=' • exprStrings
    9     | ID '=' • exprFraction

    REAL      shift, and go to state 3
    STRING    shift, and go to state 44
    FRACTION  shift, and go to state 45
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    expr          go to state 46
    exprFraction  go to state 47
    exprStrings   go to state 48


State 27

    4 line: TYPE ID • '=' expr
    5     | TYPE ID • '=' exprStrings
    6     | TYPE ID • '=' exprFraction

    '='  shift, and go to state 49


State 28

   30 expr: LOG '(' • expr ')'

    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 50


State 29

   29 expr: RAD '(' • expr ')'

    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 51


State 30

   31 expr: MOD '(' • expr ',' expr ')'

    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 52


State 31

   32 expr: POW '(' • expr ',' expr ')'

    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 53


State 32

    0 $accept: scope $end •

    $default  accept


State 33

    2 prog: line ';' • '\n' prog

    '\n'  shift, and go to state 54


State 34

   25 expr: expr '+' • expr

    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 55


State 35

   26 expr: expr '-' • expr

    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 56


State 36

   27 expr: expr '*' • expr

    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 57


State 37

   28 expr: expr ':' • expr

    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 58


State 38

   34 exprFraction: exprFraction '+' • exprFraction

    FRACTION  shift, and go to state 45

    exprFraction  go to state 59


State 39

   35 exprFraction: exprFraction '-' • exprFraction

    FRACTION  shift, and go to state 45

    exprFraction  go to state 60


State 40

   36 exprFraction: exprFraction '*' • exprFraction

    FRACTION  shift, and go to state 45

    exprFraction  go to state 61


State 41

   37 exprFraction: exprFraction ':' • exprFraction

    FRACTION  shift, and go to state 45

    exprFraction  go to state 62


State 42

   39 exprStrings: exprStrings '+' • exprStrings

    STRING  shift, and go to state 44

    exprStrings  go to state 63


State 43

   40 exprStrings: exprStrings '*' • REAL

    REAL  shift, and go to state 64


State 44

   41 exprStrings: STRING •

    $default  reduce using rule 41 (exprStrings)


State 45

   38 exprFraction: FRACTION •

    $default  reduce using rule 38 (exprFraction)


State 46

    7 line: ID '=' expr •
   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    ':'  shift, and go to state 37

    $default  reduce using rule 7 (line)


State 47

    9 line: ID '=' exprFraction •
   34 exprFraction: exprFraction • '+' exprFraction
   35             | exprFraction • '-' exprFraction
   36             | exprFraction • '*' exprFraction
   37             | exprFraction • ':' exprFraction

    '+'  shift, and go to state 38
    '-'  shift, and go to state 39
    '*'  shift, and go to state 40
    ':'  shift, and go to state 41

    $default  reduce using rule 9 (line)


State 48

    8 line: ID '=' exprStrings •
   39 exprStrings: exprStrings • '+' exprStrings
   40            | exprStrings • '*' REAL

    '+'  shift, and go to state 42
    '*'  shift, and go to state 43

    $default  reduce using rule 8 (line)


State 49

    4 line: TYPE ID '=' • expr
    5     | TYPE ID '=' • exprStrings
    6     | TYPE ID '=' • exprFraction

    REAL      shift, and go to state 3
    STRING    shift, and go to state 44
    FRACTION  shift, and go to state 45
    LOG       shift, and go to state 7
    RAD       shift, and go to state 8
    MOD       shift, and go to state 9
    POW       shift, and go to state 10

    expr          go to state 65
    exprFraction  go to state 66
    exprStrings   go to state 67


State 50

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr
   30     | LOG '(' expr • ')'

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    ':'  shift, and go to state 37
    ')'  shift, and go to state 68


State 51

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr
   29     | RAD '(' expr • ')'

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    ':'  shift, and go to state 37
    ')'  shift, and go to state 69


State 52

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr
   31     | MOD '(' expr • ',' expr ')'

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    ':'  shift, and go to state 37
    ','  shift, and go to state 70


State 53

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr
   32     | POW '(' expr • ',' expr ')'

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    ':'  shift, and go to state 37
    ','  shift, and go to state 71


State 54

    2 prog: line ';' '\n' • prog

    END         shift, and go to state 1
    ID          shift, and go to state 2
    REAL        shift, and go to state 3
    STRING      shift, and go to state 4
    FRACTION    shift, and go to state 5
    TYPE        shift, and go to state 6
    LOG         shift, and go to state 7
    RAD         shift, and go to state 8
    MOD         shift, and go to state 9
    POW         shift, and go to state 10
    IF          shift, and go to state 11
    THEN        shift, and go to state 12
    ELSE        shift, and go to state 13
    FOR         shift, and go to state 14
    TIMES       shift, and go to state 15
    FROM        shift, and go to state 16
    INCREASING  shift, and go to state 17
    DECREASING  shift, and go to state 18

    prog          go to state 72
    line          go to state 21
    expr          go to state 22
    exprFraction  go to state 23
    exprStrings   go to state 24


State 55

   25 expr: expr • '+' expr
   25     | expr '+' expr •
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr

    '*'  shift, and go to state 36
    ':'  shift, and go to state 37

    $default  reduce using rule 25 (expr)


State 56

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   26     | expr '-' expr •
   27     | expr • '*' expr
   28     | expr • ':' expr

    '*'  shift, and go to state 36
    ':'  shift, and go to state 37

    $default  reduce using rule 26 (expr)


State 57

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   27     | expr '*' expr •
   28     | expr • ':' expr

    $default  reduce using rule 27 (expr)


State 58

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr
   28     | expr ':' expr •

    $default  reduce using rule 28 (expr)


State 59

   34 exprFraction: exprFraction • '+' exprFraction
   34             | exprFraction '+' exprFraction •
   35             | exprFraction • '-' exprFraction
   36             | exprFraction • '*' exprFraction
   37             | exprFraction • ':' exprFraction

    '*'  shift, and go to state 40
    ':'  shift, and go to state 41

    $default  reduce using rule 34 (exprFraction)


State 60

   34 exprFraction: exprFraction • '+' exprFraction
   35             | exprFraction • '-' exprFraction
   35             | exprFraction '-' exprFraction •
   36             | exprFraction • '*' exprFraction
   37             | exprFraction • ':' exprFraction

    '*'  shift, and go to state 40
    ':'  shift, and go to state 41

    $default  reduce using rule 35 (exprFraction)


State 61

   34 exprFraction: exprFraction • '+' exprFraction
   35             | exprFraction • '-' exprFraction
   36             | exprFraction • '*' exprFraction
   36             | exprFraction '*' exprFraction •
   37             | exprFraction • ':' exprFraction

    $default  reduce using rule 36 (exprFraction)


State 62

   34 exprFraction: exprFraction • '+' exprFraction
   35             | exprFraction • '-' exprFraction
   36             | exprFraction • '*' exprFraction
   37             | exprFraction • ':' exprFraction
   37             | exprFraction ':' exprFraction •

    $default  reduce using rule 37 (exprFraction)


State 63

   39 exprStrings: exprStrings • '+' exprStrings
   39            | exprStrings '+' exprStrings •
   40            | exprStrings • '*' REAL

    '*'  shift, and go to state 43

    $default  reduce using rule 39 (exprStrings)


State 64

   40 exprStrings: exprStrings '*' REAL •

    $default  reduce using rule 40 (exprStrings)


State 65

    4 line: TYPE ID '=' expr •
   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    ':'  shift, and go to state 37

    $default  reduce using rule 4 (line)


State 66

    6 line: TYPE ID '=' exprFraction •
   34 exprFraction: exprFraction • '+' exprFraction
   35             | exprFraction • '-' exprFraction
   36             | exprFraction • '*' exprFraction
   37             | exprFraction • ':' exprFraction

    '+'  shift, and go to state 38
    '-'  shift, and go to state 39
    '*'  shift, and go to state 40
    ':'  shift, and go to state 41

    $default  reduce using rule 6 (line)


State 67

    5 line: TYPE ID '=' exprStrings •
   39 exprStrings: exprStrings • '+' exprStrings
   40            | exprStrings • '*' REAL

    '+'  shift, and go to state 42
    '*'  shift, and go to state 43

    $default  reduce using rule 5 (line)


State 68

   30 expr: LOG '(' expr ')' •

    $default  reduce using rule 30 (expr)


State 69

   29 expr: RAD '(' expr ')' •

    $default  reduce using rule 29 (expr)


State 70

   31 expr: MOD '(' expr ',' • expr ')'

    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 73


State 71

   32 expr: POW '(' expr ',' • expr ')'

    REAL  shift, and go to state 3
    LOG   shift, and go to state 7
    RAD   shift, and go to state 8
    MOD   shift, and go to state 9
    POW   shift, and go to state 10

    expr  go to state 74


State 72

    2 prog: line ';' '\n' prog •

    $default  reduce using rule 2 (prog)


State 73

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr
   31     | MOD '(' expr ',' expr • ')'

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    ':'  shift, and go to state 37
    ')'  shift, and go to state 75


State 74

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr
   32     | POW '(' expr ',' expr • ')'

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    ':'  shift, and go to state 37
    ')'  shift, and go to state 76


State 75

   31 expr: MOD '(' expr ',' expr ')' •

    $default  reduce using rule 31 (expr)


State 76

   32 expr: POW '(' expr ',' expr ')' •

    $default  reduce using rule 32 (expr)
