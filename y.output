Grammar

    0 $accept: scope $end

    1 scope: prog

    2 prog: line

    3 line: line ';' '\n' line
    4     | END '\n'
    5     | TYPE ID '=' expr '\n'
    6     | TYPE ID '=' exprStrings '\n'
    7     | TYPE ID '=' exprFraction '\n'
    8     | ID '=' expr '\n'
    9     | ID '=' exprStrings '\n'
   10     | ID '=' exprFraction '\n'
   11     | expr '\n'
   12     | exprFraction '\n'
   13     | exprStrings '\n'
   14     | STRING
   15     | ID
   16     | IF
   17     | THEN
   18     | ELSE
   19     | FOR
   20     | TIMES
   21     | FROM
   22     | INCREASING
   23     | DECREASING
   24     | FRACTION

   25 expr: expr '+' expr
   26     | expr '-' expr
   27     | expr '*' expr
   28     | expr ':' expr
   29     | RAD '(' expr ')'
   30     | LOG '(' expr ')'
   31     | MOD '(' expr ',' expr ')'
   32     | POW '(' expr ',' expr ')'
   33     | REAL

   34 exprFraction: exprFraction '+' exprFraction
   35             | exprFraction '-' exprFraction
   36             | exprFraction '*' exprFraction
   37             | exprFraction ':' exprFraction
   38             | FRACTION

   39 exprStrings: exprStrings '+' exprStrings
   40            | exprStrings '*' REAL
   41            | STRING


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 3 4 5 6 7 8 9 10 11 12 13
    '(' (40) 29 30 31 32
    ')' (41) 29 30 31 32
    '*' (42) 27 36 40
    '+' (43) 25 34 39
    ',' (44) 31 32
    '-' (45) 26 35
    ':' (58) 28 37
    ';' (59) 3
    '=' (61) 5 6 7 8 9 10
    error (256)
    ID <lexeme> (258) 5 6 7 8 9 10 15
    REAL <value> (259) 33 40
    STRING <lexeme> (260) 14 41
    FRACTION <lexeme> (261) 24 38
    TYPE <lexeme> (262) 5 6 7
    LOG (263) 30
    RAD (264) 29
    MOD (265) 31
    POW (266) 32
    IF (267) 16
    THEN (268) 17
    ELSE (269) 18
    FOR (270) 19
    TIMES (271) 20
    FROM (272) 21
    INCREASING (273) 22
    DECREASING (274) 23
    END (275) 4


Nonterminals, with rules where they appear

    $accept (31)
        on left: 0
    scope (32)
        on left: 1
        on right: 0
    prog (33)
        on left: 2
        on right: 1
    line (34)
        on left: 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
        on right: 2 3
    expr <value> (35)
        on left: 25 26 27 28 29 30 31 32 33
        on right: 5 8 11 25 26 27 28 29 30 31 32
    exprFraction <lexeme> (36)
        on left: 34 35 36 37 38
        on right: 7 10 12 34 35 36 37
    exprStrings <lexeme> (37)
        on left: 39 40 41
        on right: 6 9 13 39 40


State 0

    0 $accept: • scope $end

    ID          shift, and go to state 1
    REAL        shift, and go to state 2
    STRING      shift, and go to state 3
    FRACTION    shift, and go to state 4
    TYPE        shift, and go to state 5
    LOG         shift, and go to state 6
    RAD         shift, and go to state 7
    MOD         shift, and go to state 8
    POW         shift, and go to state 9
    IF          shift, and go to state 10
    THEN        shift, and go to state 11
    ELSE        shift, and go to state 12
    FOR         shift, and go to state 13
    TIMES       shift, and go to state 14
    FROM        shift, and go to state 15
    INCREASING  shift, and go to state 16
    DECREASING  shift, and go to state 17
    END         shift, and go to state 18

    scope         go to state 19
    prog          go to state 20
    line          go to state 21
    expr          go to state 22
    exprFraction  go to state 23
    exprStrings   go to state 24


State 1

    8 line: ID • '=' expr '\n'
    9     | ID • '=' exprStrings '\n'
   10     | ID • '=' exprFraction '\n'
   15     | ID •

    '='  shift, and go to state 25

    $default  reduce using rule 15 (line)


State 2

   33 expr: REAL •

    $default  reduce using rule 33 (expr)


State 3

   14 line: STRING •
   41 exprStrings: STRING •

    $end      reduce using rule 14 (line)
    ';'       reduce using rule 14 (line)
    $default  reduce using rule 41 (exprStrings)


State 4

   24 line: FRACTION •
   38 exprFraction: FRACTION •

    $end      reduce using rule 24 (line)
    ';'       reduce using rule 24 (line)
    $default  reduce using rule 38 (exprFraction)


State 5

    5 line: TYPE • ID '=' expr '\n'
    6     | TYPE • ID '=' exprStrings '\n'
    7     | TYPE • ID '=' exprFraction '\n'

    ID  shift, and go to state 26


State 6

   30 expr: LOG • '(' expr ')'

    '('  shift, and go to state 27


State 7

   29 expr: RAD • '(' expr ')'

    '('  shift, and go to state 28


State 8

   31 expr: MOD • '(' expr ',' expr ')'

    '('  shift, and go to state 29


State 9

   32 expr: POW • '(' expr ',' expr ')'

    '('  shift, and go to state 30


State 10

   16 line: IF •

    $default  reduce using rule 16 (line)


State 11

   17 line: THEN •

    $default  reduce using rule 17 (line)


State 12

   18 line: ELSE •

    $default  reduce using rule 18 (line)


State 13

   19 line: FOR •

    $default  reduce using rule 19 (line)


State 14

   20 line: TIMES •

    $default  reduce using rule 20 (line)


State 15

   21 line: FROM •

    $default  reduce using rule 21 (line)


State 16

   22 line: INCREASING •

    $default  reduce using rule 22 (line)


State 17

   23 line: DECREASING •

    $default  reduce using rule 23 (line)


State 18

    4 line: END • '\n'

    '\n'  shift, and go to state 31


State 19

    0 $accept: scope • $end

    $end  shift, and go to state 32


State 20

    1 scope: prog •

    $default  reduce using rule 1 (scope)


State 21

    2 prog: line •
    3 line: line • ';' '\n' line

    ';'  shift, and go to state 33

    $default  reduce using rule 2 (prog)


State 22

   11 line: expr • '\n'
   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr

    '+'   shift, and go to state 34
    '-'   shift, and go to state 35
    '*'   shift, and go to state 36
    ':'   shift, and go to state 37
    '\n'  shift, and go to state 38


State 23

   12 line: exprFraction • '\n'
   34 exprFraction: exprFraction • '+' exprFraction
   35             | exprFraction • '-' exprFraction
   36             | exprFraction • '*' exprFraction
   37             | exprFraction • ':' exprFraction

    '+'   shift, and go to state 39
    '-'   shift, and go to state 40
    '*'   shift, and go to state 41
    ':'   shift, and go to state 42
    '\n'  shift, and go to state 43


State 24

   13 line: exprStrings • '\n'
   39 exprStrings: exprStrings • '+' exprStrings
   40            | exprStrings • '*' REAL

    '+'   shift, and go to state 44
    '*'   shift, and go to state 45
    '\n'  shift, and go to state 46


State 25

    8 line: ID '=' • expr '\n'
    9     | ID '=' • exprStrings '\n'
   10     | ID '=' • exprFraction '\n'

    REAL      shift, and go to state 2
    STRING    shift, and go to state 47
    FRACTION  shift, and go to state 48
    LOG       shift, and go to state 6
    RAD       shift, and go to state 7
    MOD       shift, and go to state 8
    POW       shift, and go to state 9

    expr          go to state 49
    exprFraction  go to state 50
    exprStrings   go to state 51


State 26

    5 line: TYPE ID • '=' expr '\n'
    6     | TYPE ID • '=' exprStrings '\n'
    7     | TYPE ID • '=' exprFraction '\n'

    '='  shift, and go to state 52


State 27

   30 expr: LOG '(' • expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 53


State 28

   29 expr: RAD '(' • expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 54


State 29

   31 expr: MOD '(' • expr ',' expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 55


State 30

   32 expr: POW '(' • expr ',' expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 56


State 31

    4 line: END '\n' •

    $default  reduce using rule 4 (line)


State 32

    0 $accept: scope $end •

    $default  accept


State 33

    3 line: line ';' • '\n' line

    '\n'  shift, and go to state 57


State 34

   25 expr: expr '+' • expr

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 58


State 35

   26 expr: expr '-' • expr

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 59


State 36

   27 expr: expr '*' • expr

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 60


State 37

   28 expr: expr ':' • expr

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 61


State 38

   11 line: expr '\n' •

    $default  reduce using rule 11 (line)


State 39

   34 exprFraction: exprFraction '+' • exprFraction

    FRACTION  shift, and go to state 48

    exprFraction  go to state 62


State 40

   35 exprFraction: exprFraction '-' • exprFraction

    FRACTION  shift, and go to state 48

    exprFraction  go to state 63


State 41

   36 exprFraction: exprFraction '*' • exprFraction

    FRACTION  shift, and go to state 48

    exprFraction  go to state 64


State 42

   37 exprFraction: exprFraction ':' • exprFraction

    FRACTION  shift, and go to state 48

    exprFraction  go to state 65


State 43

   12 line: exprFraction '\n' •

    $default  reduce using rule 12 (line)


State 44

   39 exprStrings: exprStrings '+' • exprStrings

    STRING  shift, and go to state 47

    exprStrings  go to state 66


State 45

   40 exprStrings: exprStrings '*' • REAL

    REAL  shift, and go to state 67


State 46

   13 line: exprStrings '\n' •

    $default  reduce using rule 13 (line)


State 47

   41 exprStrings: STRING •

    $default  reduce using rule 41 (exprStrings)


State 48

   38 exprFraction: FRACTION •

    $default  reduce using rule 38 (exprFraction)


State 49

    8 line: ID '=' expr • '\n'
   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr

    '+'   shift, and go to state 34
    '-'   shift, and go to state 35
    '*'   shift, and go to state 36
    ':'   shift, and go to state 37
    '\n'  shift, and go to state 68


State 50

   10 line: ID '=' exprFraction • '\n'
   34 exprFraction: exprFraction • '+' exprFraction
   35             | exprFraction • '-' exprFraction
   36             | exprFraction • '*' exprFraction
   37             | exprFraction • ':' exprFraction

    '+'   shift, and go to state 39
    '-'   shift, and go to state 40
    '*'   shift, and go to state 41
    ':'   shift, and go to state 42
    '\n'  shift, and go to state 69


State 51

    9 line: ID '=' exprStrings • '\n'
   39 exprStrings: exprStrings • '+' exprStrings
   40            | exprStrings • '*' REAL

    '+'   shift, and go to state 44
    '*'   shift, and go to state 45
    '\n'  shift, and go to state 70


State 52

    5 line: TYPE ID '=' • expr '\n'
    6     | TYPE ID '=' • exprStrings '\n'
    7     | TYPE ID '=' • exprFraction '\n'

    REAL      shift, and go to state 2
    STRING    shift, and go to state 47
    FRACTION  shift, and go to state 48
    LOG       shift, and go to state 6
    RAD       shift, and go to state 7
    MOD       shift, and go to state 8
    POW       shift, and go to state 9

    expr          go to state 71
    exprFraction  go to state 72
    exprStrings   go to state 73


State 53

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr
   30     | LOG '(' expr • ')'

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    ':'  shift, and go to state 37
    ')'  shift, and go to state 74


State 54

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr
   29     | RAD '(' expr • ')'

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    ':'  shift, and go to state 37
    ')'  shift, and go to state 75


State 55

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr
   31     | MOD '(' expr • ',' expr ')'

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    ':'  shift, and go to state 37
    ','  shift, and go to state 76


State 56

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr
   32     | POW '(' expr • ',' expr ')'

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    ':'  shift, and go to state 37
    ','  shift, and go to state 77


State 57

    3 line: line ';' '\n' • line

    ID          shift, and go to state 1
    REAL        shift, and go to state 2
    STRING      shift, and go to state 3
    FRACTION    shift, and go to state 4
    TYPE        shift, and go to state 5
    LOG         shift, and go to state 6
    RAD         shift, and go to state 7
    MOD         shift, and go to state 8
    POW         shift, and go to state 9
    IF          shift, and go to state 10
    THEN        shift, and go to state 11
    ELSE        shift, and go to state 12
    FOR         shift, and go to state 13
    TIMES       shift, and go to state 14
    FROM        shift, and go to state 15
    INCREASING  shift, and go to state 16
    DECREASING  shift, and go to state 17
    END         shift, and go to state 18

    line          go to state 78
    expr          go to state 22
    exprFraction  go to state 23
    exprStrings   go to state 24


State 58

   25 expr: expr • '+' expr
   25     | expr '+' expr •
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr

    '*'  shift, and go to state 36
    ':'  shift, and go to state 37

    $default  reduce using rule 25 (expr)


State 59

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   26     | expr '-' expr •
   27     | expr • '*' expr
   28     | expr • ':' expr

    '*'  shift, and go to state 36
    ':'  shift, and go to state 37

    $default  reduce using rule 26 (expr)


State 60

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   27     | expr '*' expr •
   28     | expr • ':' expr

    $default  reduce using rule 27 (expr)


State 61

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr
   28     | expr ':' expr •

    $default  reduce using rule 28 (expr)


State 62

   34 exprFraction: exprFraction • '+' exprFraction
   34             | exprFraction '+' exprFraction •
   35             | exprFraction • '-' exprFraction
   36             | exprFraction • '*' exprFraction
   37             | exprFraction • ':' exprFraction

    '*'  shift, and go to state 41
    ':'  shift, and go to state 42

    $default  reduce using rule 34 (exprFraction)


State 63

   34 exprFraction: exprFraction • '+' exprFraction
   35             | exprFraction • '-' exprFraction
   35             | exprFraction '-' exprFraction •
   36             | exprFraction • '*' exprFraction
   37             | exprFraction • ':' exprFraction

    '*'  shift, and go to state 41
    ':'  shift, and go to state 42

    $default  reduce using rule 35 (exprFraction)


State 64

   34 exprFraction: exprFraction • '+' exprFraction
   35             | exprFraction • '-' exprFraction
   36             | exprFraction • '*' exprFraction
   36             | exprFraction '*' exprFraction •
   37             | exprFraction • ':' exprFraction

    $default  reduce using rule 36 (exprFraction)


State 65

   34 exprFraction: exprFraction • '+' exprFraction
   35             | exprFraction • '-' exprFraction
   36             | exprFraction • '*' exprFraction
   37             | exprFraction • ':' exprFraction
   37             | exprFraction ':' exprFraction •

    $default  reduce using rule 37 (exprFraction)


State 66

   39 exprStrings: exprStrings • '+' exprStrings
   39            | exprStrings '+' exprStrings •
   40            | exprStrings • '*' REAL

    '*'  shift, and go to state 45

    $default  reduce using rule 39 (exprStrings)


State 67

   40 exprStrings: exprStrings '*' REAL •

    $default  reduce using rule 40 (exprStrings)


State 68

    8 line: ID '=' expr '\n' •

    $default  reduce using rule 8 (line)


State 69

   10 line: ID '=' exprFraction '\n' •

    $default  reduce using rule 10 (line)


State 70

    9 line: ID '=' exprStrings '\n' •

    $default  reduce using rule 9 (line)


State 71

    5 line: TYPE ID '=' expr • '\n'
   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr

    '+'   shift, and go to state 34
    '-'   shift, and go to state 35
    '*'   shift, and go to state 36
    ':'   shift, and go to state 37
    '\n'  shift, and go to state 79


State 72

    7 line: TYPE ID '=' exprFraction • '\n'
   34 exprFraction: exprFraction • '+' exprFraction
   35             | exprFraction • '-' exprFraction
   36             | exprFraction • '*' exprFraction
   37             | exprFraction • ':' exprFraction

    '+'   shift, and go to state 39
    '-'   shift, and go to state 40
    '*'   shift, and go to state 41
    ':'   shift, and go to state 42
    '\n'  shift, and go to state 80


State 73

    6 line: TYPE ID '=' exprStrings • '\n'
   39 exprStrings: exprStrings • '+' exprStrings
   40            | exprStrings • '*' REAL

    '+'   shift, and go to state 44
    '*'   shift, and go to state 45
    '\n'  shift, and go to state 81


State 74

   30 expr: LOG '(' expr ')' •

    $default  reduce using rule 30 (expr)


State 75

   29 expr: RAD '(' expr ')' •

    $default  reduce using rule 29 (expr)


State 76

   31 expr: MOD '(' expr ',' • expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 82


State 77

   32 expr: POW '(' expr ',' • expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 83


State 78

    3 line: line • ';' '\n' line
    3     | line ';' '\n' line •

    $default  reduce using rule 3 (line)


State 79

    5 line: TYPE ID '=' expr '\n' •

    $default  reduce using rule 5 (line)


State 80

    7 line: TYPE ID '=' exprFraction '\n' •

    $default  reduce using rule 7 (line)


State 81

    6 line: TYPE ID '=' exprStrings '\n' •

    $default  reduce using rule 6 (line)


State 82

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr
   31     | MOD '(' expr ',' expr • ')'

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    ':'  shift, and go to state 37
    ')'  shift, and go to state 84


State 83

   25 expr: expr • '+' expr
   26     | expr • '-' expr
   27     | expr • '*' expr
   28     | expr • ':' expr
   32     | POW '(' expr ',' expr • ')'

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    ':'  shift, and go to state 37
    ')'  shift, and go to state 85


State 84

   31 expr: MOD '(' expr ',' expr ')' •

    $default  reduce using rule 31 (expr)


State 85

   32 expr: POW '(' expr ',' expr ')' •

    $default  reduce using rule 32 (expr)
