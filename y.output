Grammar

    0 $accept: scope $end

    1 scope: prog

    2 prog: line

    3 line: line ';' '\n' line
    4     | END '\n'
    5     | TYPE ID '=' expr '\n'
    6     | expr '\n'
    7     | exprFraction '\n'
    8     | exprStrings '\n'
    9     | STRING
   10     | ID
   11     | IF
   12     | THEN
   13     | ELSE
   14     | FOR
   15     | TIMES
   16     | FROM
   17     | INCREASING
   18     | DECREASING
   19     | FRACTION

   20 expr: expr '+' expr
   21     | expr '-' expr
   22     | expr '*' expr
   23     | expr ':' expr
   24     | RAD '(' expr ')'
   25     | LOG '(' expr ')'
   26     | MOD '(' expr ',' expr ')'
   27     | POW '(' expr ',' expr ')'
   28     | REAL

   29 exprFraction: exprFraction '+' exprFraction
   30             | exprFraction '-' exprFraction
   31             | exprFraction '*' exprFraction
   32             | exprFraction ':' exprFraction
   33             | FRACTION

   34 exprStrings: exprStrings '+' exprStrings
   35            | exprStrings '*' REAL
   36            | STRING


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 3 4 5 6 7 8
    '(' (40) 24 25 26 27
    ')' (41) 24 25 26 27
    '*' (42) 22 31 35
    '+' (43) 20 29 34
    ',' (44) 26 27
    '-' (45) 21 30
    ':' (58) 23 32
    ';' (59) 3
    '=' (61) 5
    error (256)
    ID <lexeme> (258) 5 10
    REAL <value> (259) 28 35
    STRING <lexeme> (260) 9 36
    FRACTION <lexeme> (261) 19 33
    TYPE <lexeme> (262) 5
    LOG (263) 25
    RAD (264) 24
    MOD (265) 26
    POW (266) 27
    IF (267) 11
    THEN (268) 12
    ELSE (269) 13
    FOR (270) 14
    TIMES (271) 15
    FROM (272) 16
    INCREASING (273) 17
    DECREASING (274) 18
    END (275) 4


Nonterminals, with rules where they appear

    $accept (31)
        on left: 0
    scope (32)
        on left: 1
        on right: 0
    prog (33)
        on left: 2
        on right: 1
    line (34)
        on left: 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
        on right: 2 3
    expr <value> (35)
        on left: 20 21 22 23 24 25 26 27 28
        on right: 5 6 20 21 22 23 24 25 26 27
    exprFraction <lexeme> (36)
        on left: 29 30 31 32 33
        on right: 7 29 30 31 32
    exprStrings <lexeme> (37)
        on left: 34 35 36
        on right: 8 34 35


State 0

    0 $accept: • scope $end

    ID          shift, and go to state 1
    REAL        shift, and go to state 2
    STRING      shift, and go to state 3
    FRACTION    shift, and go to state 4
    TYPE        shift, and go to state 5
    LOG         shift, and go to state 6
    RAD         shift, and go to state 7
    MOD         shift, and go to state 8
    POW         shift, and go to state 9
    IF          shift, and go to state 10
    THEN        shift, and go to state 11
    ELSE        shift, and go to state 12
    FOR         shift, and go to state 13
    TIMES       shift, and go to state 14
    FROM        shift, and go to state 15
    INCREASING  shift, and go to state 16
    DECREASING  shift, and go to state 17
    END         shift, and go to state 18

    scope         go to state 19
    prog          go to state 20
    line          go to state 21
    expr          go to state 22
    exprFraction  go to state 23
    exprStrings   go to state 24


State 1

   10 line: ID •

    $default  reduce using rule 10 (line)


State 2

   28 expr: REAL •

    $default  reduce using rule 28 (expr)


State 3

    9 line: STRING •
   36 exprStrings: STRING •

    $end      reduce using rule 9 (line)
    ';'       reduce using rule 9 (line)
    $default  reduce using rule 36 (exprStrings)


State 4

   19 line: FRACTION •
   33 exprFraction: FRACTION •

    $end      reduce using rule 19 (line)
    ';'       reduce using rule 19 (line)
    $default  reduce using rule 33 (exprFraction)


State 5

    5 line: TYPE • ID '=' expr '\n'

    ID  shift, and go to state 25


State 6

   25 expr: LOG • '(' expr ')'

    '('  shift, and go to state 26


State 7

   24 expr: RAD • '(' expr ')'

    '('  shift, and go to state 27


State 8

   26 expr: MOD • '(' expr ',' expr ')'

    '('  shift, and go to state 28


State 9

   27 expr: POW • '(' expr ',' expr ')'

    '('  shift, and go to state 29


State 10

   11 line: IF •

    $default  reduce using rule 11 (line)


State 11

   12 line: THEN •

    $default  reduce using rule 12 (line)


State 12

   13 line: ELSE •

    $default  reduce using rule 13 (line)


State 13

   14 line: FOR •

    $default  reduce using rule 14 (line)


State 14

   15 line: TIMES •

    $default  reduce using rule 15 (line)


State 15

   16 line: FROM •

    $default  reduce using rule 16 (line)


State 16

   17 line: INCREASING •

    $default  reduce using rule 17 (line)


State 17

   18 line: DECREASING •

    $default  reduce using rule 18 (line)


State 18

    4 line: END • '\n'

    '\n'  shift, and go to state 30


State 19

    0 $accept: scope • $end

    $end  shift, and go to state 31


State 20

    1 scope: prog •

    $default  reduce using rule 1 (scope)


State 21

    2 prog: line •
    3 line: line • ';' '\n' line

    ';'  shift, and go to state 32

    $default  reduce using rule 2 (prog)


State 22

    6 line: expr • '\n'
   20 expr: expr • '+' expr
   21     | expr • '-' expr
   22     | expr • '*' expr
   23     | expr • ':' expr

    '+'   shift, and go to state 33
    '-'   shift, and go to state 34
    '*'   shift, and go to state 35
    ':'   shift, and go to state 36
    '\n'  shift, and go to state 37


State 23

    7 line: exprFraction • '\n'
   29 exprFraction: exprFraction • '+' exprFraction
   30             | exprFraction • '-' exprFraction
   31             | exprFraction • '*' exprFraction
   32             | exprFraction • ':' exprFraction

    '+'   shift, and go to state 38
    '-'   shift, and go to state 39
    '*'   shift, and go to state 40
    ':'   shift, and go to state 41
    '\n'  shift, and go to state 42


State 24

    8 line: exprStrings • '\n'
   34 exprStrings: exprStrings • '+' exprStrings
   35            | exprStrings • '*' REAL

    '+'   shift, and go to state 43
    '*'   shift, and go to state 44
    '\n'  shift, and go to state 45


State 25

    5 line: TYPE ID • '=' expr '\n'

    '='  shift, and go to state 46


State 26

   25 expr: LOG '(' • expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 47


State 27

   24 expr: RAD '(' • expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 48


State 28

   26 expr: MOD '(' • expr ',' expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 49


State 29

   27 expr: POW '(' • expr ',' expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 50


State 30

    4 line: END '\n' •

    $default  reduce using rule 4 (line)


State 31

    0 $accept: scope $end •

    $default  accept


State 32

    3 line: line ';' • '\n' line

    '\n'  shift, and go to state 51


State 33

   20 expr: expr '+' • expr

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 52


State 34

   21 expr: expr '-' • expr

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 53


State 35

   22 expr: expr '*' • expr

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 54


State 36

   23 expr: expr ':' • expr

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 55


State 37

    6 line: expr '\n' •

    $default  reduce using rule 6 (line)


State 38

   29 exprFraction: exprFraction '+' • exprFraction

    FRACTION  shift, and go to state 56

    exprFraction  go to state 57


State 39

   30 exprFraction: exprFraction '-' • exprFraction

    FRACTION  shift, and go to state 56

    exprFraction  go to state 58


State 40

   31 exprFraction: exprFraction '*' • exprFraction

    FRACTION  shift, and go to state 56

    exprFraction  go to state 59


State 41

   32 exprFraction: exprFraction ':' • exprFraction

    FRACTION  shift, and go to state 56

    exprFraction  go to state 60


State 42

    7 line: exprFraction '\n' •

    $default  reduce using rule 7 (line)


State 43

   34 exprStrings: exprStrings '+' • exprStrings

    STRING  shift, and go to state 61

    exprStrings  go to state 62


State 44

   35 exprStrings: exprStrings '*' • REAL

    REAL  shift, and go to state 63


State 45

    8 line: exprStrings '\n' •

    $default  reduce using rule 8 (line)


State 46

    5 line: TYPE ID '=' • expr '\n'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 64


State 47

   20 expr: expr • '+' expr
   21     | expr • '-' expr
   22     | expr • '*' expr
   23     | expr • ':' expr
   25     | LOG '(' expr • ')'

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36
    ')'  shift, and go to state 65


State 48

   20 expr: expr • '+' expr
   21     | expr • '-' expr
   22     | expr • '*' expr
   23     | expr • ':' expr
   24     | RAD '(' expr • ')'

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36
    ')'  shift, and go to state 66


State 49

   20 expr: expr • '+' expr
   21     | expr • '-' expr
   22     | expr • '*' expr
   23     | expr • ':' expr
   26     | MOD '(' expr • ',' expr ')'

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36
    ','  shift, and go to state 67


State 50

   20 expr: expr • '+' expr
   21     | expr • '-' expr
   22     | expr • '*' expr
   23     | expr • ':' expr
   27     | POW '(' expr • ',' expr ')'

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36
    ','  shift, and go to state 68


State 51

    3 line: line ';' '\n' • line

    ID          shift, and go to state 1
    REAL        shift, and go to state 2
    STRING      shift, and go to state 3
    FRACTION    shift, and go to state 4
    TYPE        shift, and go to state 5
    LOG         shift, and go to state 6
    RAD         shift, and go to state 7
    MOD         shift, and go to state 8
    POW         shift, and go to state 9
    IF          shift, and go to state 10
    THEN        shift, and go to state 11
    ELSE        shift, and go to state 12
    FOR         shift, and go to state 13
    TIMES       shift, and go to state 14
    FROM        shift, and go to state 15
    INCREASING  shift, and go to state 16
    DECREASING  shift, and go to state 17
    END         shift, and go to state 18

    line          go to state 69
    expr          go to state 22
    exprFraction  go to state 23
    exprStrings   go to state 24


State 52

   20 expr: expr • '+' expr
   20     | expr '+' expr •
   21     | expr • '-' expr
   22     | expr • '*' expr
   23     | expr • ':' expr

    '*'  shift, and go to state 35
    ':'  shift, and go to state 36

    $default  reduce using rule 20 (expr)


State 53

   20 expr: expr • '+' expr
   21     | expr • '-' expr
   21     | expr '-' expr •
   22     | expr • '*' expr
   23     | expr • ':' expr

    '*'  shift, and go to state 35
    ':'  shift, and go to state 36

    $default  reduce using rule 21 (expr)


State 54

   20 expr: expr • '+' expr
   21     | expr • '-' expr
   22     | expr • '*' expr
   22     | expr '*' expr •
   23     | expr • ':' expr

    $default  reduce using rule 22 (expr)


State 55

   20 expr: expr • '+' expr
   21     | expr • '-' expr
   22     | expr • '*' expr
   23     | expr • ':' expr
   23     | expr ':' expr •

    $default  reduce using rule 23 (expr)


State 56

   33 exprFraction: FRACTION •

    $default  reduce using rule 33 (exprFraction)


State 57

   29 exprFraction: exprFraction • '+' exprFraction
   29             | exprFraction '+' exprFraction •
   30             | exprFraction • '-' exprFraction
   31             | exprFraction • '*' exprFraction
   32             | exprFraction • ':' exprFraction

    '*'  shift, and go to state 40
    ':'  shift, and go to state 41

    $default  reduce using rule 29 (exprFraction)


State 58

   29 exprFraction: exprFraction • '+' exprFraction
   30             | exprFraction • '-' exprFraction
   30             | exprFraction '-' exprFraction •
   31             | exprFraction • '*' exprFraction
   32             | exprFraction • ':' exprFraction

    '*'  shift, and go to state 40
    ':'  shift, and go to state 41

    $default  reduce using rule 30 (exprFraction)


State 59

   29 exprFraction: exprFraction • '+' exprFraction
   30             | exprFraction • '-' exprFraction
   31             | exprFraction • '*' exprFraction
   31             | exprFraction '*' exprFraction •
   32             | exprFraction • ':' exprFraction

    $default  reduce using rule 31 (exprFraction)


State 60

   29 exprFraction: exprFraction • '+' exprFraction
   30             | exprFraction • '-' exprFraction
   31             | exprFraction • '*' exprFraction
   32             | exprFraction • ':' exprFraction
   32             | exprFraction ':' exprFraction •

    $default  reduce using rule 32 (exprFraction)


State 61

   36 exprStrings: STRING •

    $default  reduce using rule 36 (exprStrings)


State 62

   34 exprStrings: exprStrings • '+' exprStrings
   34            | exprStrings '+' exprStrings •
   35            | exprStrings • '*' REAL

    '*'  shift, and go to state 44

    $default  reduce using rule 34 (exprStrings)


State 63

   35 exprStrings: exprStrings '*' REAL •

    $default  reduce using rule 35 (exprStrings)


State 64

    5 line: TYPE ID '=' expr • '\n'
   20 expr: expr • '+' expr
   21     | expr • '-' expr
   22     | expr • '*' expr
   23     | expr • ':' expr

    '+'   shift, and go to state 33
    '-'   shift, and go to state 34
    '*'   shift, and go to state 35
    ':'   shift, and go to state 36
    '\n'  shift, and go to state 70


State 65

   25 expr: LOG '(' expr ')' •

    $default  reduce using rule 25 (expr)


State 66

   24 expr: RAD '(' expr ')' •

    $default  reduce using rule 24 (expr)


State 67

   26 expr: MOD '(' expr ',' • expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 71


State 68

   27 expr: POW '(' expr ',' • expr ')'

    REAL  shift, and go to state 2
    LOG   shift, and go to state 6
    RAD   shift, and go to state 7
    MOD   shift, and go to state 8
    POW   shift, and go to state 9

    expr  go to state 72


State 69

    3 line: line • ';' '\n' line
    3     | line ';' '\n' line •

    $default  reduce using rule 3 (line)


State 70

    5 line: TYPE ID '=' expr '\n' •

    $default  reduce using rule 5 (line)


State 71

   20 expr: expr • '+' expr
   21     | expr • '-' expr
   22     | expr • '*' expr
   23     | expr • ':' expr
   26     | MOD '(' expr ',' expr • ')'

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36
    ')'  shift, and go to state 73


State 72

   20 expr: expr • '+' expr
   21     | expr • '-' expr
   22     | expr • '*' expr
   23     | expr • ':' expr
   27     | POW '(' expr ',' expr • ')'

    '+'  shift, and go to state 33
    '-'  shift, and go to state 34
    '*'  shift, and go to state 35
    ':'  shift, and go to state 36
    ')'  shift, and go to state 74


State 73

   26 expr: MOD '(' expr ',' expr ')' •

    $default  reduce using rule 26 (expr)


State 74

   27 expr: POW '(' expr ',' expr ')' •

    $default  reduce using rule 27 (expr)
