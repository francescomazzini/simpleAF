State 3 conflicts: 1 reduce/reduce


Grammar

    0 $accept: line $end

    1 line: expr '\n'
    2     | exprFraction
    3     | ID
    4     | IF
    5     | THEN
    6     | ELSE
    7     | FOR
    8     | TIMES
    9     | FROM
   10     | INCREASING
   11     | DECREASING
   12     | FRACTION

   13 expr: expr '+' expr
   14     | expr '-' expr
   15     | expr '*' expr
   16     | expr ':' expr
   17     | REAL

   18 exprFraction: exprFraction '+' exprFraction
   19             | FRACTION


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 1
    '*' (42) 15
    '+' (43) 13 18
    '-' (45) 14
    ':' (58) 16
    error (256)
    REAL <value> (258) 17
    ID <lexeme> (259) 3
    FRACTION <lexeme> (260) 12 19
    IF (261) 4
    THEN (262) 5
    ELSE (263) 6
    FOR (264) 7
    TIMES (265) 8
    FROM (266) 9
    INCREASING (267) 10
    DECREASING (268) 11


Nonterminals, with rules where they appear

    $accept (19)
        on left: 0
    line (20)
        on left: 1 2 3 4 5 6 7 8 9 10 11 12
        on right: 0
    expr <value> (21)
        on left: 13 14 15 16 17
        on right: 1 13 14 15 16
    exprFraction <lexeme> (22)
        on left: 18 19
        on right: 2 18


State 0

    0 $accept: • line $end

    REAL        shift, and go to state 1
    ID          shift, and go to state 2
    FRACTION    shift, and go to state 3
    IF          shift, and go to state 4
    THEN        shift, and go to state 5
    ELSE        shift, and go to state 6
    FOR         shift, and go to state 7
    TIMES       shift, and go to state 8
    FROM        shift, and go to state 9
    INCREASING  shift, and go to state 10
    DECREASING  shift, and go to state 11

    line          go to state 12
    expr          go to state 13
    exprFraction  go to state 14


State 1

   17 expr: REAL •

    $default  reduce using rule 17 (expr)


State 2

    3 line: ID •

    $default  reduce using rule 3 (line)


State 3

   12 line: FRACTION •
   19 exprFraction: FRACTION •

    $end      reduce using rule 12 (line)
    $end      [reduce using rule 19 (exprFraction)]
    '+'       reduce using rule 19 (exprFraction)
    $default  reduce using rule 12 (line)


State 4

    4 line: IF •

    $default  reduce using rule 4 (line)


State 5

    5 line: THEN •

    $default  reduce using rule 5 (line)


State 6

    6 line: ELSE •

    $default  reduce using rule 6 (line)


State 7

    7 line: FOR •

    $default  reduce using rule 7 (line)


State 8

    8 line: TIMES •

    $default  reduce using rule 8 (line)


State 9

    9 line: FROM •

    $default  reduce using rule 9 (line)


State 10

   10 line: INCREASING •

    $default  reduce using rule 10 (line)


State 11

   11 line: DECREASING •

    $default  reduce using rule 11 (line)


State 12

    0 $accept: line • $end

    $end  shift, and go to state 15


State 13

    1 line: expr • '\n'
   13 expr: expr • '+' expr
   14     | expr • '-' expr
   15     | expr • '*' expr
   16     | expr • ':' expr

    '+'   shift, and go to state 16
    '-'   shift, and go to state 17
    '*'   shift, and go to state 18
    ':'   shift, and go to state 19
    '\n'  shift, and go to state 20


State 14

    2 line: exprFraction •
   18 exprFraction: exprFraction • '+' exprFraction

    '+'  shift, and go to state 21

    $default  reduce using rule 2 (line)


State 15

    0 $accept: line $end •

    $default  accept


State 16

   13 expr: expr '+' • expr

    REAL  shift, and go to state 1

    expr  go to state 22


State 17

   14 expr: expr '-' • expr

    REAL  shift, and go to state 1

    expr  go to state 23


State 18

   15 expr: expr '*' • expr

    REAL  shift, and go to state 1

    expr  go to state 24


State 19

   16 expr: expr ':' • expr

    REAL  shift, and go to state 1

    expr  go to state 25


State 20

    1 line: expr '\n' •

    $default  reduce using rule 1 (line)


State 21

   18 exprFraction: exprFraction '+' • exprFraction

    FRACTION  shift, and go to state 26

    exprFraction  go to state 27


State 22

   13 expr: expr • '+' expr
   13     | expr '+' expr •
   14     | expr • '-' expr
   15     | expr • '*' expr
   16     | expr • ':' expr

    '*'  shift, and go to state 18
    ':'  shift, and go to state 19

    $default  reduce using rule 13 (expr)


State 23

   13 expr: expr • '+' expr
   14     | expr • '-' expr
   14     | expr '-' expr •
   15     | expr • '*' expr
   16     | expr • ':' expr

    '*'  shift, and go to state 18
    ':'  shift, and go to state 19

    $default  reduce using rule 14 (expr)


State 24

   13 expr: expr • '+' expr
   14     | expr • '-' expr
   15     | expr • '*' expr
   15     | expr '*' expr •
   16     | expr • ':' expr

    $default  reduce using rule 15 (expr)


State 25

   13 expr: expr • '+' expr
   14     | expr • '-' expr
   15     | expr • '*' expr
   16     | expr • ':' expr
   16     | expr ':' expr •

    $default  reduce using rule 16 (expr)


State 26

   19 exprFraction: FRACTION •

    $default  reduce using rule 19 (exprFraction)


State 27

   18 exprFraction: exprFraction • '+' exprFraction
   18             | exprFraction '+' exprFraction •

    $default  reduce using rule 18 (exprFraction)
